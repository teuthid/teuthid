/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef TEUTHID_CONFIG_HPP
#define TEUTHID_CONFIG_HPP

#define TEUTHID_MAJOR_VERSION @teuthid_VERSION_MAJOR@
#define TEUTHID_MINOR_VERSION @teuthid_VERSION_MINOR@
#define TEUTHID_PATCH_VERSION @teuthid_VERSION_PATCH@
#define TEUTHID_SOVERSION @teuthid_library_soversion@
#define TEUTHID_VERSION "@teuthid_VERSION@"

#cmakedefine TEUTHID_WITH_OPENCL

#include <cstddef>
#include <cstdint>
#include <mpfr.h>

#cmakedefine TEUTHID_HAVE_INT_128
#cmakedefine TEUTHID_HAVE_NATIVE_FLOAT_16
#cmakedefine TEUTHID_HAVE_NATIVE_FLOAT_32
#cmakedefine TEUTHID_HAVE_NATIVE_FLOAT_64
#cmakedefine TEUTHID_HAVE_NATIVE_FLOAT_80
#cmakedefine TEUTHID_HAVE_NATIVE_FLOAT_128

namespace teuthid {
#ifndef DOXYGEN_SHOULD_SKIP_THIS

constexpr std::size_t float16_prec = 11;
constexpr std::size_t float32_prec = 24;
constexpr std::size_t float64_prec = 53;
constexpr std::size_t float80_prec = 64;
constexpr std::size_t float128_prec = 113;
constexpr std::size_t float256_prec = 237;

@typedef_int8_t@
@typedef_int16_t@
@typedef_int32_t@
@typedef_int64_t@
@typedef_int128_t@
@typedef_uint8_t@
@typedef_uint16_t@
@typedef_uint32_t@
@typedef_uint64_t@
@typedef_uint128_t@

@typedef_intptr_t@
@typedef_uintptr_t@

template <std::size_t Precision> class floatmp;

@typedef_float_16_t@
@typedef_float_32_t@
@typedef_float_64_t@
@typedef_float_80_t@
@typedef_float_128_t@
typedef floatmp<float256_prec> float256_t;

#if defined(TEUTHID_WITH_OPENCL)
namespace clb {
using int8_t = teuthid::int8_t;
using int16_t = teuthid::int16_t;
using int32_t = teuthid::int32_t;
using int64_t = teuthid::int64_t;
using int128_t = teuthid::int128_t;
using uint8_t = teuthid::uint8_t;
using uint16_t = teuthid::uint16_t;
using uint32_t = teuthid::uint32_t;
using uint64_t = teuthid::uint64_t;
using uint128_t = teuthid::uint128_t;

using intptr_t = teuthid::intptr_t;
using uintptr_t = teuthid::uintptr_t;

using float16_t = teuthid::float16_t;
using float32_t = teuthid::float32_t;
using float64_t = teuthid::float64_t;
using float80_t = teuthid::float80_t;
using float128_t = teuthid::float128_t;
using float256_t = teuthid::float256_t;
} // namespace clb
#endif // TEUTHID_WITH_OPENCL
#endif // DOXYGEN_SHOULD_SKIP_THIS
} // namespace teuthid

#include <type_traits>
#ifndef DOXYGEN_SHOULD_SKIP_THIS
#define TEUTHID_ENUM_CLASS_BITWISE_OPS(NAME)                                   \
  inline NAME operator&(NAME x, NAME y) {                                      \
    typedef typename std::underlying_type<NAME>::type UTYPE;                   \
    return static_cast<NAME>(static_cast<UTYPE>(x) & static_cast<UTYPE>(y));   \
  }                                                                            \
  inline NAME operator|(NAME x, NAME y) {                                      \
    typedef typename std::underlying_type<NAME>::type UTYPE;                   \
    return static_cast<NAME>(static_cast<UTYPE>(x) | static_cast<UTYPE>(y));   \
  }                                                                            \
  inline NAME operator^(NAME x, NAME y) {                                      \
    typedef typename std::underlying_type<NAME>::type UTYPE;                   \
    return static_cast<NAME>(static_cast<UTYPE>(x) ^ static_cast<UTYPE>(y));   \
  }                                                                            \
  inline NAME operator~(NAME x) {                                              \
    typedef typename std::underlying_type<NAME>::type UTYPE;                   \
    return static_cast<NAME>(~static_cast<UTYPE>(x));                          \
  }                                                                            \
  inline NAME &operator&=(NAME &x, NAME y) {                                   \
    x = x & y;                                                                 \
    return x;                                                                  \
  }                                                                            \
  inline NAME &operator|=(NAME &x, NAME y) {                                   \
    x = x | y;                                                                 \
    return x;                                                                  \
  }                                                                            \
  inline NAME &operator^=(NAME &x, NAME y) {                                   \
    x = x ^ y;                                                                 \
    return x;                                                                  \
  }
#endif // DOXYGEN_SHOULD_SKIP_THIS

#endif // TEUTHID_CONFIG_HPP
