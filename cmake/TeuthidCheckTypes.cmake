
include(CheckTypeSize)

# integer types
check_type_size("int8_t" int8_t LANGUAGE CXX)
set(TEUTHID_HAVE_INT8_T ${int8_t})
if ("${int8_t}" STREQUAL 1)
  set(typedef_int8_t "typedef std::int8_t int8_t;")
else()
  set(typedef_int8_t "typedef std::int_least8_t int8_t;")
endif()

check_type_size("int16_t" int16_t LANGUAGE CXX)
set(TEUTHID_HAVE_INT16_T ${int16_t})
if ("${int16_t}" STREQUAL 2)
  set(typedef_int16_t "typedef std::int16_t int16_t;")
else()
  set(typedef_int16_t "typedef std::int_least16_t int16_t;")
endif()

check_type_size("int32_t" int32_t LANGUAGE CXX)
set(TEUTHID_HAVE_INT32_T ${int32_t})
if ("${int32_t}" STREQUAL 4)
  set(typedef_int32_t "typedef std::int32_t int32_t;")
else()
  set(typedef_int32_t "typedef std::int_least32_t int32_t;")
endif()

check_type_size("int64_t" int64_t LANGUAGE CXX)
set(TEUTHID_HAVE_INT64_T ${int64_t})
if ("${int64_t}" STREQUAL 8)
  set(typedef_int64_t "typedef std::int64_t int64_t;")
else()
  set(typedef_int64_t "typedef std::int_least64_t int64_t;")
endif()

check_type_size("uint8_t" uint8_t LANGUAGE CXX)
set(TEUTHID_HAVE_UINT8_T ${uint8_t})
if ("${uint8_t}" STREQUAL 1)
  set(typedef_uint8_t "typedef std::uint8_t uint8_t;")
else()
  set(typedef_uint8_t "typedef std::uint_least8_t uint8_t;")
endif()

check_type_size("uint16_t" uint16_t LANGUAGE CXX)
set(TEUTHID_HAVE_UINT16_T ${uint16_t})
if ("${uint16_t}" STREQUAL 2)
  set(typedef_uint16_t "typedef std::uint16_t uint16_t;")
else()
  set(typedef_uint16_t "typedef std::uint_least16_t uint16_t;")
endif()

check_type_size("uint32_t" uint32_t LANGUAGE CXX)
set(TEUTHID_HAVE_UINT32_T ${uint32_t})
if ("${uint32_t}" STREQUAL 4)
  set(typedef_uint32_t "typedef std::uint32_t uint32_t;")
else()
  set(typedef_uint32_t "typedef std::uint_least32_t uint32_t;")
endif()

check_type_size("uint64_t" uint64_t LANGUAGE CXX)
set(TEUTHID_HAVE_UINT64_T ${uint64_t})
if ("${uint64_t}" STREQUAL 8)
  set(typedef_uint64_t "typedef std::uint64_t uint64_t;")
else()
  set(typedef_uint64_t "typedef std::uint_least64_t uint64_t;")
endif()

check_type_size("intptr_t" intptr_t LANGUAGE CXX)
set(TEUTHID_HAVE_INTPTR_T ${intptr_t})
if ("${intptr_t}" STREQUAL "")
  set(typedef_intptr_t "typedef std::int_least64_t intptr_t;")
else()
  set(typedef_intptr_t "typedef std::intptr_t intptr_t;")
endif()

check_type_size("uintptr_t" uintptr_t LANGUAGE CXX)
set(TEUTHID_HAVE_UINTPTR_T ${uintptr_t})
if ("${uintptr_t}" STREQUAL "")
  set(typedef_uintptr_t "typedef std::uint_least64_t uintptr_t;")
else()
  set(typedef_uintptr_t "typedef std::uintptr_t uintptr_t;")
endif()


# floating point types
check_type_size("float" float_t LANGUAGE CXX)
check_type_size("double" double_t LANGUAGE CXX)
check_type_size("long double" long_double_t LANGUAGE CXX)

set(float16_native "")
set(float32_native "")
set(float64_native "")
set(float80_native "")
set(float128_native "")

if ("${float_t}" STREQUAL "2")
  set(float16_native "float")
elseif ("${float_t}" STREQUAL "4")
  set(float32_native "float")
elseif ("${float_t}" STREQUAL "8")
  set(float64_native "float")
endif()

if ("${double_t}" STREQUAL "4")
  set(float32_native "double")
elseif ("${double_t}" STREQUAL "8")
  set(float64_native "double")
elseif ("${double_t}" STREQUAL "10")
  set(float80_native "double")
endif()

if ("${long_double_t}" STREQUAL "8")
  set(float64_native "long double")
elseif ("${long_double_t}" STREQUAL "10")
  set(float80_native "long double")
elseif ("${long_double_t}" STREQUAL "16")
  set(float128_native "long double")
endif()

# definitions of floating point types
set(TEUTHID_HAVE_NATIVE_FLOAT_16 OFF)
set(TEUTHID_HAVE_NATIVE_FLOAT_32 OFF)
set(TEUTHID_HAVE_NATIVE_FLOAT_64 OFF)
set(TEUTHID_HAVE_NATIVE_FLOAT_80 OFF)
set(TEUTHID_HAVE_NATIVE_FLOAT_128 OFF)

if ("${float16_native}" STREQUAL "")
  set(typedef_float_16_t "typedef mpfr_t float16_t;")
else()
  set(TEUTHID_HAVE_NATIVE_FLOAT_16 ON)
  set(typedef_float_16_t "typedef ${float16_native} float16_t;")
endif()
if ("${float32_native}" STREQUAL "")
  set(typedef_float_32_t "typedef mpfr_t float32_t;")
else()
  set(TEUTHID_HAVE_NATIVE_FLOAT_32 ON)
  set(typedef_float_32_t "typedef ${float32_native} float32_t;")
endif()
if ("${float64_native}" STREQUAL "")
  set(typedef_float_64_t "typedef mpfr_t float64_t;")
else()
  set(TEUTHID_HAVE_NATIVE_FLOAT_64 ON)
  set(typedef_float_64_t "typedef ${float64_native} float64_t;")
endif()
if ("${float80_native}" STREQUAL "")
  set(typedef_float_80_t "typedef mpfr_t float80_t;")
else()
  set(TEUTHID_HAVE_NATIVE_FLOAT_80 ON)
  set(typedef_float_80_t "typedef ${float80_native} float80_t;")
endif()
if ("${float128_native}" STREQUAL "")
  set(typedef_float_128_t "typedef mpfr_t float128_t;")
else()
  set(TEUTHID_HAVE_NATIVE_FLOAT_128 ON)
  set(typedef_float_128_t "typedef ${float128_native} float128_t;")
endif()
