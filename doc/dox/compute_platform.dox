/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/


/*! \typedef typedef std::vector<compute_platform> teuthid::compute_platforms_t
 * \brief This is a type alias for the vector containing objects of class
 * \ref teuthid::compute_platform "compute_platform".
 *
 * \see \ref teuthid::compute_platform::platforms() 
 * "compute_platform::platforms()".
 */


/*! \class teuthid::compute_platform compute_platform.hpp \ 
<teuthid/compute_platform.hpp>
 *  \brief This class holds information about the OpenCL platform.
 * 
 * <a href="https://www.khronos.org/opencl/">OpenCL</a> is used as an interface 
 * for executing code on parallel devices such as GPUs and multi-core CPUs. 
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 *
 * \b Example:
 * \code
 * #include <iostream>
 * #include <teuthid/library.hpp>
 * using namespace teuthid;
 * 
 * int main() {
 *   std::cout << "Available OpenCL platform(s): "
 *             << library::compute_platforms().size() << std::endl;
 *
 *   for (auto __platform : library::compute_platforms()) {
 *
 *     std::cout << "Platform Name: " << __platform.name() << std::endl;
 *     std::cout << "Platform Vendor: " << __platform.vendor() << std::endl;
 *     std::cout << "Platform Version: " << __platform.version() << std::endl;
 *
 *     if (__platform.is_full_profile())
 *       std::cout << "  Platform Profile: FULL PROFILE" << std::endl;
 *   }   
 *
 *   return 0;
 * }
 * \endcode
 * See \ref teuthid::library::have_compute_kernel() 
 * "library::have_compute_kernel()" and platforms() about checking if the 
 * running system has OpenCL-capable hardware 
 * and drivers.
 */

 
/*! \fn teuthid::compute_platform::compute_platform() noexcept
 * \brief Constructs a new object of class compute_platform.
 *
 * The new object is empty and <b>does not</b> contain information about any
 * OpenCL platform.
 */


/*! \fn compute_platform::~compute_platform()
 * \brief Destructs an object of class compute_platform.
 */


/*! \fn const compute_platform_id_t &compute_platform::id() const
 * \brief Returns the identifier for this platform.
 *
 * \return the identifier for this OpenCL platform. The returned value is the 
 * equivalent of \c cl_platform_id. If it is equal to \c NULL, this OpenCL 
 * platform is undetermined.
 */
   

/*! \fn const compute_profile_t &compute_platform::profile() const
 * \brief Returns the OpenCL platform's profile.
 *
 * \return the OpenCL profile supported by this OpenCL platform. It can be one 
 * of the following: 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE",
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE", or
 * \ref teuthid::COMPUTE_UNKNOWN_PROFILE "COMPUTE_UNKNOWN_PROFILE".
 * \see is_full_profile(), is_embedded_profile().
* The returned value is the equivalent of \c CL_PLATFORM_PROFILE.
 */


/*! \fn bool compute_platform::is_full_profile() const
 * \brief Returns \c true if this platform's profile is 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE".
 * 
 * \return \c true if this OpenCL platform's profile is 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE". Otherwise returns 
 * \c false.
 * \see profile().
 */


/*! \fn bool compute_platform::is_embedded_profile() const
 * \brief Returns \c true if the platform's profile is 
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE".
 * 
 * \return \c true if this OpenCL platform's profile is 
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE". Otherwise 
 * returns \c false.
 * \see profile().
 */
 

/*! \fn const std::string &compute_platform::version() const
 * \brief Returns the platform's version.
 *
 * \return the OpenCL version supported by this platform.\n
 * The returned value has the following format:
 * \e "OpenCL<space><major_version.minor_version><space><platform-specific information>".\n
 * The \e "major_version.minor_version" determines a version of OpenCL 
 * supported by this OpenCL platform.\n
 * The returned value is the equivalent of \c CL_PLATFORM_VERSION.
 * If it is an empty string, a version supported by this OpenCL platform is 
 * undetermined.
 * \see major_version(), minor_version(), spec_version().
 */


/*! \fn int compute_platform::major_version() const
 * \brief Returns the OpenCL major version.
 * \return the OpenCL major version supported by this OpenCL platform.
 * \see minor_version(), version().
 */


/*! \fn int compute_platform::minor_version() const
 * \brief Returns the OpenCL minor version.
 * \return the OpenCL minor version supported by this OpenCL platform.
 * \see major_version(), version().
 */


/*! \fn const std::string &compute_platform::spec_version() const
 * \brief Returns the platform-specific information.
 * \return Returns the platform-specific information about the OpenCL supported 
 * by this OpenCL platform.
 * \see version().
 */


/*! \fn bool compute_platform::is_required_version(int major, int minor) const
 * \brief Checks whether a version of OpenCL is sufficient.
 *
 * \return \c true if the version of OpenCL supported by this OpenCL platform
 * is a sufficient version. Otherwise return \c false.
 * @param[in] major The required minimum major version of OpenCL.
 * @param[in] minor The required minimum minor version of OpenCL (if the major 
 * version is the same as required \c major).
 * \see major_version(), minor_version(), version().
 */


/*! \fn const std::string &compute_platform::name() const
 * \brief Returns the platform's name.
 *
 * \return the name of this OpenCL platform's.The returned value is the 
 * equivalent of \c CL_PLATFORM_NAME. If it is an empty string, this name 
 * is undetermined.
 */


/*! \fn const std::string &compute_platform::vendor() const
 * \brief Returns the platform's vendor.
 *
 * \return the vendor of this OpenCL platform.The returned value is the 
 * equivalent of \c CL_PLATFORM_VENDOR. If it is an empty string, this vendor 
 * is undetermined.
 */


/*! \fn const std::string &compute_platform::extensions() const
 * \brief Returns the space-separated list of extension names. 
 *
 * \return the space-separated list of extension names supported by this 
 * OpenCL platform. The extension names themselves do not contain any spaces.\n 
 * The returned value is the equivalent of \c CL_PLATFORM_EXTENSIONS.
 * If it is an empty string, these extensions are undetermined.
 */


/*! \fn const std::string &compute_platform::icd_suffix_khr() const
 * \brief Returns the function name suffix.
 *
 * \return the function name suffix used to identify extension functions to be 
 * directed to this OpenCL platform by the ICD Loader. The returned value is 
 * the equivalent of \c CL_PLATFORM_ICD_SUFFIX_KHR.
 * If it is an empty string, this suffix is undetermined.
 */


/*!
 * \fn const compute_devices_t &compute_platform::devices() const
 * \brief Returns the vector containing objects of class compute_device.
 * \return the vector of type 
 * \ref teuthid::compute_devices_t "compute_devices_t" containing objects of 
 * class compute_device - the OpenCL devices assigned to this OpenCL platform.
 * \see platforms(), num_devices().
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 */


/*! \fn std::size_t compute_platform::num_devices()
 * \brief Returns the number of devices.
 *
 * \return the number of OpenCL devices assigned to this OpenCL platform.
 * \see devices().
 */


/*! \fn const opencl_platforms_t &compute_platform::platforms()
 * \brief Returns the vector containing objects of class compute_platform.
 * \return a reference to the vector of type 
 * \ref teuthid::compute_platforms_t "compute_platforms_t" containing objects 
 * of class compute_platform.
 * \throw invalid_compute_platform if cannot detect OpenCL platform(s).
 * \throw invalid_compute_device if cannot detect OpenCL device(s).
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 */

