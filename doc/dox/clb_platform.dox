/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/

/*! 
\file platform.hpp 
*/ 


/*! 
\enum teuthid::clb::platparam_t
\brief This enumeration includes named constants that identifies the OpenCL 
platform information being queried.
\details This is equivalent to \c cl_platform_info.
*/
/*! 
\var teuthid::clb::platparam_t::PROFILE
\hideinitializer
Returns the profile (clb::platprofile_t) supported by the implementation. This 
is equivalent to \c CL_PLATFORM_PROFILE. See platform::profile(), 
platform::is_full_profile(), platform::is_embedded_profile().
*/
/*! 
\var teuthid::clb::platparam_t::VERSION
\hideinitializer
OpenCL version string. Returns the OpenCL version supported by the 
implementation. This is equivalent to \c CL_PLATFORM_VERSION. See 
platform::version().
*/
/*! 
\var teuthid::clb::platparam_t::NAME
\hideinitializer
Platform name string. This is equivalent to \c CL_PLATFORM_NAME. See 
platform::name().
*/
/*! 
\var teuthid::clb::platparam_t::VENDOR
\hideinitializer
Platform vendor string. This is equivalent to \c CL_PLATFORM_VENDOR. See 
platform::vendor().
*/
/*! 
\var teuthid::clb::platparam_t::EXTENSIONS
\hideinitializer
Returns a list of extension names supported by the platform. Extensions defined 
here must be supported by all devices associated with this platform. This is 
equivalent to \c CL_PLATFORM_EXTENSIONS. See platform::extensions(), 
platform::has_extension().
*/
/*! 
\var teuthid::clb::platparam_t::ICD_SUFFIX_KHR
\hideinitializer
If the \c cl_khr_icd extension is enabled, the function name suffix used to 
identify extension functions to be directed to this platform by the ICD Loader. 
This is equivalent to \c CL_PLATFORM_ICD_SUFFIX_KHR. See 
platform::icd_suffix_khr().
*/
/*! 
\var teuthid::clb::platparam_t::HOST_TIMER_RESOLUTION
\hideinitializer
Returns the resolution of the host timer in nanoseconds. This is equivalent to 
\c CL_PLATFORM_HOST_TIMER_RESOLUTION. See platform::host_timer_resolution().
*/


/*! 
\typedef std::vector<platform> teuthid::clb::platforms_t
\brief This is a type alias for the vector containing objects of class 
clb::platform.
*/


/*! 
\class teuthid::clb::platform platform.hpp <teuthid/clb/platform.hpp>
\brief This class holds information about the OpenCL platform.
\details <a href="https://www.khronos.org/opencl/">OpenCL</a> is used as an 
interface for executing code on parallel devices such as GPUs and multi-core 
CPUs. 
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
\see system::has_cl_backend() and platform::get_all() about checking if the 
running system has OpenCL-capable hardware and drivers.
*/

 
/*! 
\fn platform::platform(const platform_id_t &platform_id)
\brief Constructs a new object of class clb::platform.
@param[in] platform_id the ID for the OpenCL platform.
\throw invalid_platform if \c platform_id is invalid and points to a 
non-existent OpenCL platform or is equal to \c nullptr.
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
\see id(), platform::get(), platform::get_all(), platform::get_default().
*/

/*!
\fn template <platparam_t value> platform_param<value>::value_type platform::info() const
\brief Gets specific information about the platform.
@param value a platform query - see clb::platparam_t.
\throw invalid_platform if \c value is an invalid parameter.
\return the platform's parameter.
*/

/*! 
\fn const platform_id_t &platform::id() const
\brief Returns the identifier for this platform.
\return the identifier for this OpenCL platform. The returned value is the 
equivalent of \c cl_platform_id.
\see platform::get().
*/
   

/*! 
\fn profile_t platform::profile() const
\brief Returns the platform's profile.
\return the OpenCL profile supported by this OpenCL platform. The returned 
value is the equivalent of \c CL_PLATFORM_PROFILE.
\see is_full_profile(), is_embedded_profile().
*/


/*! 
\fn bool platform::is_full_profile() const
\brief Returns \c true if this platform has a full profile. 
\return \c true if this OpenCL platform's profile is platprofile_t::FULL. 
Otherwise, it returns \c false.
\see profile().
*/


/*! 
\fn bool platform::is_embedded_profile() const
\brief Returns \c true if this platform's has an embedded profile.
\return \c true if this OpenCL platform's profile is platprofile_t::EMBEDDED. 
Otherwise, it returns \c false.
\see profile().
*/
 

/*! 
\fn std::string platform::version() const
\brief Returns this platform's version.
\return the OpenCL version supported by this platform. The returned value has 
the following format: 
\e "<major_version.minor_version><space><platform-specific information>". 
The \e "major_version.minor_version" determines a version of OpenCL supported 
by this platform. The returned value is the equivalent of 
\c CL_PLATFORM_VERSION. If it is an empty string, a version supported by this
platform is undetermined.
\see check_version().
*/


/*! 
\fn bool platform::check_version(int major, int minor) const
\brief Checks whether a version of OpenCL is sufficient.
\return \c true if the version of OpenCL supported by this platform is a 
sufficient version. Otherwise, it returns \c false.
@param[in] major The required minimum major version of OpenCL.
@param[in] minor The required minimum minor version of OpenCL (if the major 
version is the same as required \c major).
\see version().
*/


/*! 
\fn std::string platform::name() const
\brief Returns the platform's name.
\return the name of this OpenCL platform's. The returned value is the 
equivalent of \c CL_PLATFORM_NAME. If it is an empty string, this name is 
undetermined.
*/


/*! 
\fn std::string platform::vendor() const
\brief Returns the platform's vendor.
\return the vendor of this OpenCL platform. The returned value is the 
equivalent of \c CL_PLATFORM_VENDOR. If it is an empty string, this vendor is 
undetermined.
*/


/*! 
\fn extensions_t platform::extensions() const
\brief Returns extension names. 
\return the vector of extension names supported by this OpenCL platform. The 
returned value is the equivalent of \c CL_PLATFORM_EXTENSIONS. If it is an 
empty vector, these extensions are undetermined.
\n Extensions must be supported by all devices associated with this platform.
\see has_extension().
*/


/*! 
\fn bool platform::has_extension(const std::string &ext_name) const
\brief Returns \c true if this platform supports the extension \c ext_name.
\return \c true if this platform supports the extension \c ext_name. Otherwise, 
it returns \c false.
@param[in] ext_name a name of OpenCL extension.
\see extensions().
*/


/*!
\fn uint64_t platform::host_timer_resolution() const
\brief Returns the resolution of the host timer.
\return the resolution of the host timer in nanoseconds. The returned value is 
the equivalent of \c CL_PLATFORM_HOST_TIMER_RESOLUTION.
*/


/*! 
\fn std::string platform::icd_suffix_khr() const
\brief Returns the function name suffix.
\return the function name suffix used to identify extension functions to be 
directed to this OpenCL platform by the ICD Loader. The returned value is the 
equivalent of \c CL_PLATFORM_ICD_SUFFIX_KHR. If it is an empty string, this 
suffix is undetermined.
*/


/*! 
\fn const devices_t &platform::devices() const
\brief Returns devices assigned to this platform.
\return the vector containing objects of class clb::device - the OpenCL devices 
assigned to this OpenCL platform.
\see device_count().
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
*/


/*! 
\fn std::size_t platform::device_count()
\brief Returns the number of devices.
\return the number of OpenCL devices assigned to this OpenCL platform.
\see devices().
*/


/*! 
\fn bool platform::unload_compiler()
\brief Allows the implementation to release the resources allocated by the 
OpenCL compiler for this platform.
\return \c true if the function is executed successfully. Otherwise, it returns 
\c false.
*/


/*! 
\fn bool platform::operator==(const platform &other) const
\brief Returns \c true if this platform is the same as \c other.
\return \c true if this OpenCL platform is the same as \c other. Otherwise, it 
returns \c false.
@param[in] other an object of class clb::platform.
\see id().
*/


/*! 
\fn bool platform::operator!=(const platform &other) const
\brief Returns \c true if this platform is different from \c other.
\return \c true if this OpenCL platform is different from \c other. Otherwise, 
it returns \c false.
@param[in] other an object of class clb::platform.
\see id().
*/


/*!
\fn const platform &platform::get(const platform_id_t &platform_id)
\brief Returns the platform by its identifier.
\return a reference to the OpenCL platform by its identifier.
@param[in] platform_id the ID of the OpenCL platform.
\throw invalid_platform if the platform with the specified identifier does not 
exist.
\see id().
*/


/*! 
\fn const platforms_t &platform::get_all()
\brief Returns all available platfoms.
\return a reference to the vector containing objects of class clb::platform.
\throw invalid_platform if there is a problem with the proper diagnosis of the 
available OpenCL platform(s) on the system.
\throw invalid_device if there is a problem with the proper diagnosis of the 
available OpenCL device(s) on the system.
\see platform::get_default(), platform::count().
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
*/


/*!
\fn const platform &platform::get_default()
\brief Returns the default platform.
\return a reference to the default OpenCL platform.
\throw invalid_platform if there is a problem with the proper diagnosis of the 
default OpenCL platform.
\see platform::set_default().
*/


/*!
\fn const platform &platform::set_default(const platform &plat)
\brief Modify the default platform to be used by subsequent operations.
\details Will only set the default if no default was previously created.
\return updated default platform. Should be compared to the passed value to 
ensure that it was updated.
@param[in] plat the default OpenCL platform.
\throw invalid_platform if there is a problem with the proper diagnosis of the 
default OpenCL platform.
\see platform::get_default().
*/


/*! 
\fn std::size_t platform::count()
\brief Returns the number of platforms.
\return the number of OpenCL platforms supported by the system.
\see platform::get_all().
*/
