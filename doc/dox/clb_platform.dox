/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/


/*! \typedef typedef cl_platform_id teuthid::clb::platform_id_t
 * \brief This is a type alias for \c cl_platform_id.
 *
 * \see \ref teuthid::clb::platform::id() "platform::id()".
 */


/*! \typedef typedef std::vector<platform> teuthid::clb::platforms_t
 * \brief This is a type alias for the vector containing objects of class
 * \ref teuthid::clb::platform "platform".
 *
 * \see \ref teuthid::clb::platform::platforms() "platform::platforms()".
 */


/*! \class teuthid::clb::platform platform.hpp <teuthid/clb/platform.hpp>
 *  \brief This class holds information about the OpenCL platform.
 * 
 * <a href="https://www.khronos.org/opencl/">OpenCL</a> is used as an interface 
 * for executing code on parallel devices such as GPUs and multi-core CPUs. 
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 *
 * \b Example:
 * \code
 * #include <iostream>
 * #include <teuthid/clb/platform.hpp>
 * using namespace teuthid;
 * 
 * int main() {
 *   std::cout << "Available OpenCL platform(s): "
 *             << clb::platform::platform_count() << std::endl;
 *
 *   for (auto __platform : clb::platform::platforms()) {
 *
 *     std::cout << "Platform Name: " << __platform.name() << std::endl;
 *     std::cout << "Platform Vendor: " << __platform.vendor() << std::endl;
 *     std::cout << "Platform Version: " << __platform.version() << std::endl;
 *
 *     if (__platform.is_full_profile())
 *       std::cout << "  Platform Profile: FULL PROFILE" << std::endl;
 *   }   
 *
 *   return 0;
 * }
 * \endcode
 * See \ref teuthid::system::have_clb() "system::have_clb()" and platforms()
 * about checking if the running system has OpenCL-capable hardware 
 * and drivers.
 */

 
/*! \fn teuthid::clb::platform::platform(platform_id_t id)
 * \brief Constructs a new object of class platform.
 * @param[in] id the ID (\c cl_platform_id) for a OpenCL platform.
 * \throw invalid_platform if \c id is invalid and points to a non-existent 
 * OpenCL platform or is equal to \c nullptr.
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 * \see id(), platforms().
 */


/*! \fn const platform_id_t &platform::id() const
 * \brief Returns the identifier for this platform.
 *
 * \return the identifier for this OpenCL platform.
 * The returned value is the equivalent of \c cl_platform_id.
 */
   

/*! \fn const profile_t &platform::profile() const
 * \brief Returns the OpenCL platform's profile.
 *
 * \return the OpenCL profile supported by this OpenCL platform. It can be one 
 * of the following: 
 * \ref teuthid::clb::FULL_PROFILE "FULL_PROFILE",
 * \ref teuthid::clb::EMBEDDED_PROFILE "EMBEDDED_PROFILE", or
 * \ref teuthid::clb::UNKNOWN_PROFILE "UNKNOWN_PROFILE". \n
 * The returned value is the equivalent of \c CL_PLATFORM_PROFILE.
 * \see is_full_profile(), is_embedded_profile().
 */


/*! \fn bool platform::is_full_profile() const
 * \brief Returns \c true if this platform's profile is 
 * \ref teuthid::clb::FULL_PROFILE "FULL_PROFILE".
 * 
 * \return \c true if this OpenCL platform's profile is 
 * \ref teuthid::clb::FULL_PROFILE "FULL_PROFILE". 
 * Otherwise, it returns \c false.
 * \see profile().
 */


/*! \fn bool platform::is_embedded_profile() const
 * \brief Returns \c true if the platform's profile is 
 * \ref teuthid::clb::EMBEDDED_PROFILE "EMBEDDED_PROFILE".
 * 
 * \return \c true if this OpenCL platform's profile is 
 * \ref teuthid::clb::EMBEDDED_PROFILE "EMBEDDED_PROFILE". 
 * Otherwise, it returns \c false.
 * \see profile().
 */
 

/*! \fn const std::string &platform::version() const
 * \brief Returns the platform's version.
 *
 * \return the OpenCL version supported by this platform.
 * The returned value has the following format:
 * \e "OpenCL<space><major_version.minor_version><space><platform-specific information>".
 * The \e "major_version.minor_version" determines a version of OpenCL 
 * supported by this OpenCL platform.\n
 * The returned value is the equivalent of \c CL_PLATFORM_VERSION.
 * If it is an empty string, a version supported by this OpenCL platform is 
 * undetermined.
 * \see major_version(), minor_version(), spec_version().
 */


/*! \fn int platform::major_version() const
 * \brief Returns the OpenCL major version.
 * \return the OpenCL major version supported by this OpenCL platform.
 * \see minor_version(), version().
 */


/*! \fn int platform::minor_version() const
 * \brief Returns the OpenCL minor version.
 * \return the OpenCL minor version supported by this OpenCL platform.
 * \see major_version(), version().
 */


/*! \fn const std::string &platform::spec_version() const
 * \brief Returns the platform-specific information.
 * \return Returns the platform-specific information about the OpenCL supported 
 * by this OpenCL platform.
 * \see version().
 */


/*! \fn bool platform::is_required_version(int major, int minor) const
 * \brief Checks whether a version of OpenCL is sufficient.
 *
 * \return \c true if the version of OpenCL supported by this OpenCL platform
 * is a sufficient version. Otherwise, it returns \c false.
 * @param[in] major The required minimum major version of OpenCL.
 * @param[in] minor The required minimum minor version of OpenCL (if the major 
 * version is the same as required \c major).
 * \see major_version(), minor_version(), version().
 */


/*! \fn const std::string &platform::name() const
 * \brief Returns the platform's name.
 *
 * \return the name of this OpenCL platform's.
 * The returned value is the equivalent of \c CL_PLATFORM_NAME. 
 * If it is an empty string, this name is undetermined.
 */


/*! \fn const std::string &platform::vendor() const
 * \brief Returns the platform's vendor.
 *
 * \return the vendor of this OpenCL platform.
 * The returned value is the equivalent of \c CL_PLATFORM_VENDOR. 
 * If it is an empty string, this vendor is undetermined.
 */


/*! \fn const extensions_t &platform::extensions() const
 * \brief Returns a reference to the vector of extension names. 
 *
 * \return a reference to the vector of extension names supported by this 
 * OpenCL platform.
 * The returned value is the equivalent of \c CL_PLATFORM_EXTENSIONS. 
 * If it is an empty vector, these extensions are undetermined.
 *
 * Extensions must be supported by all devices associated with this platform.
 * \see have_extension().
 */


/*! \fn bool platform::have_extension(const std::string &ext_name) const
 * \brief Return \c true if this platform supports the extension \c ext_name.
 * 
 * \return \c true if this platform supports the extension \c ext_name.
 * Otherwise, it returns \c false.
 * @param[in] ext_name a name of OpenCL extension.
 */


/*! \fn const std::string &platform::icd_suffix_khr() const
 * \brief Returns the function name suffix.
 *
 * \return the function name suffix used to identify extension functions to be 
 * directed to this OpenCL platform by the ICD Loader.
 * The returned value is the equivalent of \c CL_PLATFORM_ICD_SUFFIX_KHR.
 * If it is an empty string, this suffix is undetermined.
 */


/*! \fn const devices_t &platform::devices() const
 * \brief Returns the vector containing objects of class 
 * \ref teuthid::clb::device "device".
 * \return the vector of type 
 * \ref teuthid::clb::devices_t "devices_t" containing objects of 
 * class \ref teuthid::clb::device "device" - the OpenCL devices assigned to 
 * this OpenCL platform.
 * \see platforms(), device_count().
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 */


/*! \fn std::size_t platform::device_count()
 * \brief Returns the number of devices.
 *
 * \return the number of OpenCL devices assigned to this OpenCL platform.
 * \see devices().
 */


/*! \fn bool platform::unload_compiler()
 * \brief Allows the implementation to release the resources allocated by the 
 * OpenCL compiler for this platform.
 * \return \c true if the function is executed successfully.
 * Otherwise, it returns \c false.
 */


/*! \fn const platforms_t &platform::platforms()
 * \brief Returns the vector containing objects of class 
 * \ref teuthid::clb::platform "platform".
 * \return a reference to the vector of type 
 * \ref teuthid::clb::platforms_t "platforms_t" containing objects 
 * of class \ref teuthid::clb::platform "platform".
 * \throw invalid_platform if there is a problem with the proper 
 * diagnosis of the available OpenCL platform(s) on the system.
 * \throw invalid_device if there is a problem with the proper 
 * diagnosis of the available OpenCL device(s) on the system.
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 */


/*! \fn std::size_t platform::platform_count()
 * \brief Returns the number of platforms.
 *
 * \return the number of OpenCL platforms supported by the system.
 * \see platforms().
 */
