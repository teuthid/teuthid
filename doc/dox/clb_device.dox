/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/

/*!
\file device.hpp
*/


/*! 
\enum teuthid::clb::devparam_t
\brief This enumeration includes named constants that identifies the OpenCL device information being queried.
\details This is equivalent to \c cl_device_info.
*/
/*! 
\var teuthid::clb::devparam_t::ADDRESS_BITS
\hideinitializer
The default compute device address space size of the global address space 
specified as \c uint32_t value in bits. This is equivalent to 
\c CL_DEVICE_ADDRESS_BITS. See device::address_bits().
*/
/*!
\var teuthid::clb::devparam_t::AVAILABLE
\hideinitializer
Is \c true if the device is available and \c false otherwise. A device is 
considered to be available if the device can be expected to successfully 
execute commands enqueued to the device. This is equivalent to 
\c CL_DEVICE_AVAILABLE. See device::is_available().
*/
/*! 
\var teuthid::clb::devparam_t::BUILT_IN_KERNELS
\hideinitializer
A clb::built_in_kernels_t list of built-in kernels supported by the device. 
An empty list is returned if no built-in kernels are supported by the device. 
This is equivalent to \c CL_DEVICE_BUILT_IN_KERNELS. 
See device::built_in_kernels().
*/
/*! 
\var teuthid::clb::devparam_t::COMPILER_AVAILABLE
\hideinitializer
Is \c false if the implementation does not have a compiler available to 
compile the program source. Is \c true if the compiler is available. This can 
be \c false for the embedded platform profile only. This is equivalent to 
\c CL_DEVICE_COMPILER_AVAILABLE. See device::is_compiler_available(),
device::profile().
*/ 
/*! 
\var teuthid::clb::devparam_t::DOUBLE_FP_CONFIG
\hideinitializer
Describes double precision floating-point capability of the OpenCL device as a 
clb::devfp_config_t value. Double precision is an optional feature. This is 
equivalent to \c CL_DEVICE_DOUBLE_FP_CONFIG. See device::double_fp_config(), 
device::has_double_precision().
*/
/*! 
\var teuthid::clb::devparam_t::ENDIAN_LITTLE
\hideinitializer
Is \c true if the OpenCL device is a little endian device and \c false 
otherwise. This is equivalent to \c CL_DEVICE_ENDIAN_LITTLE.
*/
/*! 
\var teuthid::clb::devparam_t::ERROR_CORRECTION_SUPPORT
\hideinitializer
Is \c true if the device implements error correction for all accesses to 
compute device memory (global and constant). Is \c false if the device does not 
implement such error correction. This is equivalent to 
\c CL_DEVICE_ERROR_CORRECTION_SUPPORT.
*/
/*! 
\var teuthid::clb::devparam_t::EXECUTION_CAPABILITIES
\hideinitializer
Describes the execution capabilities of the device as a clb::devexec_caps_t 
value. This is equivalent to \c CL_DEVICE_EXECUTION_CAPABILITIES.
*/ 
/*! 
\var teuthid::clb::devparam_t::EXTENSIONS
\hideinitializer
Returns a teuthid::clb::extensions_t list of extension names (the extension 
names themselves do not contain any spaces) supported by the device. The list 
of extension names returned can be vendor supported extension names and one or 
more of the Khronos approved extension names. This is equivalent to 
\c CL_DEVICE_EXTENSIONS. See device::extensions(), device::has_extension().
*/
/*! 
\var teuthid::clb::devparam_t::GLOBAL_MEM_CACHE_SIZE
\hideinitializer
Size of global memory cache in bytes. This is equivalent to 
\c CL_DEVICE_GLOBAL_MEM_CACHE_SIZE. See device::global_mem_cache_size().
*/ 
/*! 
\var teuthid::clb::devparam_t::GLOBAL_MEM_CACHE_TYPE
\hideinitializer
Type (clb::devmem_cache_t) of global memory cache supported. This is equivalent 
to \c CL_DEVICE_GLOBAL_MEM_CACHE_TYPE.
*/
/*! 
\var teuthid::clb::devparam_t::GLOBAL_MEM_CACHELINE_SIZE
\hideinitializer
Size of global memory cache line in bytes. This is equivalent to 
\c CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE. See 
device::global_mem_cache_line_size().
*/ 
/*! 
\var teuthid::clb::devparam_t::GLOBAL_MEM_SIZE
\hideinitializer
Size of global device memory in bytes. This is equivalent to 
\c CL_DEVICE_GLOBAL_MEM_SIZE. See device::global_mem_size().
*/
/*! 
\var teuthid::clb::devparam_t::GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE
\hideinitializer
Maximum preferred total size, in bytes, of all program variables in the global 
address space. This is a performance hint. An implementation may place such 
variables in storage with optimized device access. This query returns the 
capacity of such storage. This is equivalent to 
\c CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE.
*/ 
/*! 
\var teuthid::clb::devparam_t::IMAGE2D_MAX_HEIGHT
\hideinitializer
Max height of 2D image in pixels. This is equivalent to 
\c CL_DEVICE_IMAGE2D_MAX_HEIGHT.
*/
/*! 
\var teuthid::clb::devparam_t::IMAGE2D_MAX_WIDTH
\hideinitializer
Max width of 2D image or 1D image not created from a buffer object in pixels.
This is equivalent to \c CL_DEVICE_IMAGE2D_MAX_WIDTH.
*/ 
/*! 
\var teuthid::clb::devparam_t::IMAGE3D_MAX_DEPTH
\hideinitializer
Max depth of 3D image in pixels. This is equivalent to 
\c CL_DEVICE_IMAGE3D_MAX_DEPTH.
*/
/*! 
\var teuthid::clb::devparam_t::IMAGE3D_MAX_HEIGHT
\hideinitializer
Max height of 3D image in pixels. This is equivalent to 
\c CL_DEVICE_IMAGE3D_MAX_HEIGHT. 
*/
/*! 
\var teuthid::clb::devparam_t::IMAGE3D_MAX_WIDTH
\hideinitializer
Max width of 3D image in pixels. This is equivalent to 
\c CL_DEVICE_IMAGE3D_MAX_WIDTH. 
*/ 
/*! 
\var teuthid::clb::devparam_t::IMAGE_BASE_ADDRESS_ALIGNMENT
\hideinitializer
This query specifies the minimum alignment in pixels of the pointer to the 
buffer data specified to the buffer object. This is equivalent to 
\c CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT.
*/ 
/*! 
\var teuthid::clb::devparam_t::IMAGE_MAX_ARRAY_SIZE
\hideinitializer
Maximum number of images in a 1D or 2D image array. This is equivalent to 
\c CL_DEVICE_IMAGE_MAX_ARRAY_SIZE.
*/ 
/*! 
\var teuthid::clb::devparam_t::IMAGE_MAX_BUFFER_SIZE
\hideinitializer
Maximum number of pixels for a 1D image created from a buffer object. This is 
equivalent to \c CL_DEVICE_IMAGE_MAX_BUFFER_SIZE.
*/ 
/*! 
\var teuthid::clb::devparam_t::IMAGE_PITCH_ALIGNMENT
\hideinitializer
The row pitch alignment size in pixels for 2D images created from a buffer. 
This is equivalent to \c CL_DEVICE_IMAGE_PITCH_ALIGNMENT.
*/ 
/*! 
\var teuthid::clb::devparam_t::IMAGE_SUPPORT
\hideinitializer
Is \c true if images are supported by the OpenCL device and \c false otherwise. 
This is equivalent to \c CL_DEVICE_IMAGE_SUPPORT.
*/ 
/*! 
\var teuthid::clb::devparam_t::LOCAL_MEM_SIZE
\hideinitializer
Size of local memory region in bytes. This is equivalent to 
\c CL_DEVICE_LOCAL_MEM_SIZE. See device::local_mem_size().
*/ 
/*! 
\var teuthid::clb::devparam_t::LOCAL_MEM_TYPE
\hideinitializer
Type (clb::devlocal_mem_t) of local memory supported. This is equivalent to 
\c CL_DEVICE_LOCAL_MEM_TYPE.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_CLOCK_FREQUENCY
\hideinitializer
Maximum configured clock frequency of the device in MHz. This is equivalent to 
\c CL_DEVICE_MAX_CLOCK_FREQUENCY. See device::max_clock_frequency().
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_COMPUTE_UNITS
\hideinitializer
The number of parallel compute units on the OpenCL device. A work-group  
executes on a single compute unit. The minimum value is 1. This is equivalent 
to \c CL_DEVICE_MAX_COMPUTE_UNITS. See device::max_compute_units().
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_CONSTANT_ARGS
\hideinitializer
Maximum number of arguments declared with the \c __constant qualifier in a 
kernel. This is equivalent to \c CL_DEVICE_MAX_CONSTANT_ARGS.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_CONSTANT_BUFFER_SIZE
\hideinitializer
Maximum size in bytes of a constant buffer allocation. This is equivalent to 
\c CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_GLOBAL_VARIABLE_SIZE
\hideinitializer
Maximum number of bytes of storage that may be allocated for any single 
variable in program scope or inside a function in OpenCL C declared in the 
global address space. This is equivalent to 
\c CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_MEM_ALLOC_SIZE
\hideinitializer
Maximum size of memory object allocation in bytes. This is equivalent to 
\c CL_DEVICE_MAX_MEM_ALLOC_SIZE. See device::max_mem_alloc_size().
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_NUM_SUB_GROUPS
\hideinitializer
Maximum number of sub-groups in a work-group that a device is capable of 
executing on a single compute unit, for any given kernel-instance running on 
the device. This is equivalent to \c CL_DEVICE_MAX_NUM_SUB_GROUPS.
*/
/*! 
\var teuthid::clb::devparam_t::MAX_ON_DEVICE_EVENTS
\hideinitializer
Maximum number of events in use by a device queue. This is equivalent to 
\c CL_DEVICE_MAX_ON_DEVICE_EVENTS.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_ON_DEVICE_QUEUES
\hideinitializer
Maximum number of device queues that can be created per context. This is 
equivalent to \c CL_DEVICE_MAX_ON_DEVICE_QUEUES.
*/
/*! 
\var teuthid::clb::devparam_t::MAX_PARAMETER_SIZE
\hideinitializer
Maximum size in bytes of all arguments that can be passed to a kernel. This is 
equivalent to \c CL_DEVICE_MAX_PARAMETER_SIZE.
*/  
/*! 
\var teuthid::clb::devparam_t::MAX_PIPE_ARGS
\hideinitializer
Maximum number of pipe objects that can be passed as arguments to a kernel. 
This is equivalent to \c CL_DEVICE_MAX_PIPE_ARGS.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_READ_IMAGE_ARGS
\hideinitializer
Maximum number of image objects arguments of a kernel declared with the 
\c read_only qualifier. This is equivalent to \c CL_DEVICE_MAX_READ_IMAGE_ARGS.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_READ_WRITE_IMAGE_ARGS
\hideinitializer
Maximum number of image objects arguments of a kernel declared with the 
\c write_only or \c read_write qualifier. This is equivalent to 
\c CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_SAMPLERS
\hideinitializer
Maximum number of samplers that can be used in a kernel. This is equivalent to 
\c CL_DEVICE_MAX_SAMPLERS.
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_WORK_GROUP_SIZE
\hideinitializer
Maximum number of work-items in a work-group that a device is capable of 
executing on a single compute unit, for any given kernel-instance running on 
the device. This is equivalent to \c CL_DEVICE_MAX_WORK_GROUP_SIZE. See 
device::max_work_group_size().
*/ 
/*! 
\var teuthid::clb::devparam_t::MAX_WORK_ITEM_DIMENSIONS
\hideinitializer
Maximum dimensions that specify the global and local work-item IDs used by the 
data parallel execution model. This is equivalent to 
\c CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS. See device::max_work_item_dimensions().
*/
/*! 
\var teuthid::clb::devparam_t::MAX_WORK_ITEM_SIZES
\hideinitializer
Maximum number of work-items that can be specified in each dimension of the 
work-group. This is equivalent to \c CL_DEVICE_MAX_WORK_ITEM_SIZES.
*/  
/*! 
\var teuthid::clb::devparam_t::MAX_WRITE_IMAGE_ARGS
\hideinitializer
Max number of image objects arguments of a kernel declared with the 
\c write_only qualifier. This is equivalent to 
\c CL_DEVICE_MAX_WRITE_IMAGE_ARGS.
*/
/*! 
\var teuthid::clb::devparam_t::MEM_BASE_ADDR_ALIGN
\hideinitializer
Alignment requirement (in bits) for sub-buffer offsets. This is equivalent to 
\c CL_DEVICE_MEM_BASE_ADDR_ALIGN.
*/  
/*! 
\var teuthid::clb::devparam_t::NAME
\hideinitializer
Device name string. This is equivalent to \c CL_DEVICE_NAME. See device::name().
*/ 
/*! 
\var teuthid::clb::devparam_t::NATIVE_VECTOR_WIDTH_CHAR
\hideinitializer
Returns the native ISA vector width. The vector width is defined as the number 
of scalar elements that can be stored in the vector. This is equivalent to 
\c CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR. See device::native_vector_width().
*/ 
/*! 
\var teuthid::clb::devparam_t::NATIVE_VECTOR_WIDTH_SHORT
\hideinitializer
Returns the native ISA vector width. The vector width is defined as the number 
of scalar elements that can be stored in the vector. This is equivalent to 
\c CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT. See device::native_vector_width().
*/ 
/*! 
\var teuthid::clb::devparam_t::NATIVE_VECTOR_WIDTH_INT
\hideinitializer
Returns the native ISA vector width. The vector width is defined as the number 
of scalar elements that can be stored in the vector. This is equivalent to 
\c CL_DEVICE_NATIVE_VECTOR_WIDTH_INT. See device::native_vector_width().
*/ 
/*! 
\var teuthid::clb::devparam_t::NATIVE_VECTOR_WIDTH_LONG
\hideinitializer
Returns the native ISA vector width. The vector width is defined as the number 
of scalar elements that can be stored in the vector. This is equivalent to 
\c CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG. See device::native_vector_width().
*/ 
/*! 
\var teuthid::clb::devparam_t::NATIVE_VECTOR_WIDTH_FLOAT
\hideinitializer
Returns the native ISA vector width. The vector width is defined as the number 
of scalar elements that can be stored in the vector. This is equivalent to 
\c CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT. See device::native_vector_width().
*/ 
/*! 
\var teuthid::clb::devparam_t::NATIVE_VECTOR_WIDTH_DOUBLE
\hideinitializer
Returns the native ISA vector width. The vector width is defined as the number 
of scalar elements that can be stored in the vector. This is equivalent to 
\c CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE. See device::native_vector_width().
*/ 
/*! 
\var teuthid::clb::devparam_t::NATIVE_VECTOR_WIDTH_HALF
\hideinitializer
Returns the native ISA vector width. The vector width is defined as the number 
of scalar elements that can be stored in the vector. This is equivalent to 
\c CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF. See device::native_vector_width().
*/ 
/*! 
\var teuthid::clb::devparam_t::OPENCL_C_VERSION
\hideinitializer
OpenCL C version string. Returns the highest OpenCL C version supported by the 
compiler for this device. This is equivalent to \c CL_DEVICE_OPENCL_C_VERSION. 
See device::c_version().
*/
/*! 
\var teuthid::clb::devparam_t::PARTITION_AFFINITY_DOMAIN
\hideinitializer
Returns the list of supported affinity domains for partitioning the device. 
This is a bit-field of type clb::devaffinity_domain_t. If the device does not 
support any affinity domains, a value of \c 0 will be returned. This is 
equivalent to \c CL_DEVICE_PARTITION_AFFINITY_DOMAIN.
*/
/*! 
\var teuthid::clb::devparam_t::PARTITION_MAX_SUB_DEVICES
\hideinitializer
Returns the maximum number of sub-devices that can be created when a device is 
partitioned. The value returned cannot exceed devparam_t::MAX_COMPUTE_UNITS.
This is equivalent to \c CL_DEVICE_PARTITION_MAX_SUB_DEVICES.
*/ 
/*! 
\var teuthid::clb::devparam_t::PARTITION_PROPERTIES
\hideinitializer
Returns the list (clb::partition_properties_t) of partition types supported by 
device. This is equivalent to \c CL_DEVICE_PARTITION_PROPERTIES.
*/
/*! 
\var teuthid::clb::devparam_t::PARTITION_TYPE
\hideinitializer
<em>TO DO</em>
*/
/*! 
\var teuthid::clb::devparam_t::PIPE_MAX_ACTIVE_RESERVATIONS
\hideinitializer
Maximum number of reservations that can be active for a pipe per work-item in a 
kernel. A work-group reservation is counted as one reservation per work-item. 
This is equivalent to \c CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS.
*/
/*! 
\var teuthid::clb::devparam_t::PIPE_MAX_PACKET_SIZE
\hideinitializer
Maximum size of pipe packet in bytes. This is equivalent to 
\c CL_DEVICE_PIPE_MAX_PACKET_SIZE.
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_GLOBAL_ATOMIC_ALIGNMENT
\hideinitializer
Returns the value representing the preferred alignment in bytes for atomic 
types to global memory. This query can return \c 0 which indicates that the 
preferred alignment is aligned to the natural size of the type. This is 
equivalent to \c CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT.
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_INTEROP_USER_SYNC
\hideinitializer
Is \c true if the device's preference is for the user to be responsible for 
synchronization, when sharing memory objects between OpenCL and other APIs such 
as DirectX, \c false if the device/implementation has a performant path for 
performing synchronization of memory object shared between OpenCL and other 
APIs such as DirectX. This is equivalent to 
\c CL_DEVICE_PREFERRED_INTEROP_USER_SYNC.
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_LOCAL_ATOMIC_ALIGNMENT
\hideinitializer
Returns the value representing the preferred alignment in bytes for atomic 
types to local memory. This query can return \c 0 which indicates that the 
preferred alignment is aligned to the natural size of the type. This is 
equivalent to \c CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT.
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_PLATFORM_ATOMIC_ALIGNMENT
\hideinitializer
Returns the value representing the preferred alignment in bytes for 
fine-grained SVM atomic types. This query can return \c 0 which indicates that 
the preferred alignment is aligned to the natural size of the type. This is 
equivalent to \c CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT.
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_VECTOR_WIDTH_CHAR
\hideinitializer
Preferred native vector width size for built-in scalar types that can be put 
into vectors. The vector width is defined as the number of scalar elements that 
can be stored in the vector. This is equivalent to 
\c CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR. See device::preferred_vector_width().
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_VECTOR_WIDTH_SHORT
\hideinitializer
Preferred native vector width size for built-in scalar types that can be put 
into vectors. The vector width is defined as the number of scalar elements that 
can be stored in the vector. This is equivalent to 
\c CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT. See device::preferred_vector_width().
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_VECTOR_WIDTH_INT
\hideinitializer
Preferred native vector width size for built-in scalar types that can be put 
into vectors. The vector width is defined as the number of scalar elements that 
can be stored in the vector. This is equivalent to 
\c CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT. See device::preferred_vector_width().
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_VECTOR_WIDTH_LONG
\hideinitializer
Preferred native vector width size for built-in scalar types that can be put 
into vectors. The vector width is defined as the number of scalar elements that 
can be stored in the vector. This is equivalent to 
\c CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG. See device::preferred_vector_width().
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_VECTOR_WIDTH_FLOAT
\hideinitializer
Preferred native vector width size for built-in scalar types that can be put 
into vectors. The vector width is defined as the number of scalar elements that 
can be stored in the vector. This is equivalent to 
 \c CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT. See 
 device::preferred_vector_width().
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_VECTOR_WIDTH_DOUBLE
\hideinitializer
Preferred native vector width size for built-in scalar types that can be put 
into vectors. The vector width is defined as the number of scalar elements that 
can be stored in the vector. This is equivalent to 
\c CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE. See 
device::preferred_vector_width().
*/
/*! 
\var teuthid::clb::devparam_t::PREFERRED_VECTOR_WIDTH_HALF
\hideinitializer
Preferred native vector width size for built-in scalar types that can be put 
into vectors. The vector width is defined as the number of scalar elements that 
can be stored in the vector. This is equivalent to 
\c CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF. See device::preferred_vector_width().
*/
/*! 
\var teuthid::clb::devparam_t::PRINTF_BUFFER_SIZE
\hideinitializer
Maximum size in bytes of the internal buffer that holds the output of \c printf 
calls from a kernel. This is equivalent to \c CL_DEVICE_PRINTF_BUFFER_SIZE. 
*/ 
/*! 
\var teuthid::clb::devparam_t::PROFILE
\hideinitializer
Returns the profile (clb::devprofile_t) supported by the device. This is 
equivalent to \c CL_DEVICE_PROFILE. See device::profile(), 
device::is_full_profile(), device::is_embedded_profile().
*/
/*! 
\var teuthid::clb::devparam_t::PROFILING_TIMER_RESOLUTION
\hideinitializer
Describes the resolution of device timer. This is measured in nanoseconds. This 
is equivalent to \c CL_DEVICE_PROFILING_TIMER_RESOLUTION. See 
device::profiling_timer_resolution().
*/
/*! 
\var teuthid::clb::devparam_t::QUEUE_ON_DEVICE_MAX_SIZE
\hideinitializer
Maximum size of the device queue in bytes. This is equivalent to 
\c CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE.
*/
/*! 
\var teuthid::clb::devparam_t::QUEUE_ON_DEVICE_PREFERRED_SIZE
\hideinitializer
The size of the device queue in bytes preferred by the implementation. 
Applications should use this size for the device queue to ensure good 
performance. This is equivalent to \c CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE.
*/
/*! 
\var teuthid::clb::devparam_t::QUEUE_ON_DEVICE_PROPERTIES
\hideinitializer
Describes the on device command-queue properties 
(clb::devcommand_queue_properties_t) supported by the device. This is 
equivalent to \c CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES.
*/
/*! 
\var teuthid::clb::devparam_t::QUEUE_ON_HOST_PROPERTIES
\hideinitializer
Describes the on host command-queue properties 
(clb::devcommand_queue_properties_t) supported by the device. This is 
equivalent to \c CL_DEVICE_QUEUE_ON_HOST_PROPERTIES.
*/
/*! 
\var teuthid::clb::devparam_t::REFERENCE_COUNT
\hideinitializer
Returns the device reference count. If the device is a root-level device, a 
reference count of one is returned. This is equivalent to 
\c CL_DEVICE_REFERENCE_COUNT.
*/
/*! 
\var teuthid::clb::devparam_t::SINGLE_FP_CONFIG
\hideinitializer
Describes single precision floating-point capability (clb::devfp_config_t) of 
the device. This is equivalent to \c CL_DEVICE_SINGLE_FP_CONFIG. See 
device::single_fp_config(), device::has_single_precision().
*/
/*! 
\var teuthid::clb::devparam_t::SVM_CAPABILITIES
\hideinitializer
Describes the various shared virtual memory (a.k.a. SVM) memory allocation 
types the device supports. Coarse-grain SVM allocations are required to be 
supported by all devices. This is a bit-field of type 
clb::devsvm_capabilities_t. This is equivalent to \c CL_DEVICE_SVM_CAPABILITIES.
*/
/*! 
\var teuthid::clb::devparam_t::TYPE
\hideinitializer
The OpenCL device type (clb::devtype_t). This is equivalent to 
\c CL_DEVICE_TYPE. See device::devtype(), device::is_cpu(), device::is_gpu().
*/
/*! 
\var teuthid::clb::devparam_t::VENDOR
\hideinitializer
Vendor name string. This is equivalent to \c CL_DEVICE_VENDOR. See 
device::vendor().
*/
/*! 
\var teuthid::clb::devparam_t::VENDOR_ID
\hideinitializer
A unique device vendor identifier. This is equivalent to \c CL_DEVICE_VENDOR_ID.
*/
/*! 
\var teuthid::clb::devparam_t::VERSION
\hideinitializer
OpenCL version string. Returns the OpenCL version supported by the device. This 
is equivalent to \c CL_DEVICE_VERSION. See device::version(), 
device::check_version().
*/
/*! 
\var teuthid::clb::devparam_t::DRIVER_VERSION
\hideinitializer
OpenCL software driver version string. This is equivalent to 
\c CL_DRIVER_VERSION. See device::driver_version().
*/


/*! 
\enum teuthid::clb::devaffinity_domain_t
\brief This enumeration includes named constants that identifies affinity 
domains. 
\details This is equivalent to \c cl_device_affinity_domain.
*/
/*! 
\var teuthid::clb::devaffinity_domain_t::NUMA
\hideinitializer
Compute units that share a NUMA node. This is equivalent to 
\c CL_DEVICE_AFFINITY_DOMAIN_NUMA.
*/ 
/*! 
\var teuthid::clb::devaffinity_domain_t::L4_CACHE
\hideinitializer
Compute units that share a level 4 data cache. This is equivalent to 
\c CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE.
*/
/*! 
\var teuthid::clb::devaffinity_domain_t::L3_CACHE
\hideinitializer
Compute units that share a level 3 data cache. This is equivalent to 
\c CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE.
*/
/*! 
\var teuthid::clb::devaffinity_domain_t::L2_CACHE
\hideinitializer
Compute units that share a level 2 data cache. This is equivalent to 
\c CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE.
*/
/*! 
\var teuthid::clb::devaffinity_domain_t::L1_CACHE
\hideinitializer
Compute units that share a level 1 data cache. This is equivalent to 
\c CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE.
*/
/*! 
\var teuthid::clb::devaffinity_domain_t::NEXT_PARTITIONABLE
\hideinitializer
Next partitionable affinity domain. The implementation shall find the first 
level along which the device or sub-device may be further subdivided in the 
order NUMA, L4, L3, L2, L1, and partition the device into sub-devices comprised 
of compute units that share memory subsystems at this level. This is equivalent 
to \c CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE.
*/


/*! 
\enum teuthid::clb::devcommand_queue_properties_t
\brief This enumeration includes named constants that identifies properties for 
the command-queue.
\details This is equivalent to \c cl_command_queue_properties.
*/
/*! 
\var teuthid::clb::devcommand_queue_properties_t::OUT_OF_ORDER_EXEC_MODE_ENABLE
\hideinitializer
Determines whether the commands queued in the command-queue are executed 
in-order or out-of-order. If set, the commands in the command-queue are 
executed out-of-order. Otherwise, commands are executed in-order. This is 
equivalent to \c CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE.
*/ 
/*! 
\var teuthid::clb::devcommand_queue_properties_t::PROFILING_ENABLE
\hideinitializer
Enable or disable profiling of commands in the command-queue. If set, the 
profiling of commands is enabled. Otherwise profiling of commands is disabled. 
This is equivalent to \c CL_QUEUE_PROFILING_ENABLE.
*/
/*! 
\var teuthid::clb::devcommand_queue_properties_t::ON_DEVICE
\hideinitializer
Indicates that this is a device queue. If set, \c OUT_OF_ORDER_EXEC_MODE_ENABLE 
must also be set. Only out-of-order device queues are supported. This is 
equivalent to \c CL_QUEUE_ON_DEVICE.
*/
/*! 
\var teuthid::clb::devcommand_queue_properties_t::ON_DEVICE_DEFAULT
\hideinitializer
Indicates that this is the default device queue. This can only be used with 
devcommand_queue_properties_t::ON_DEVICE. The application must create the 
default device queue if any kernels containing calls to get_default_queue are 
enqueued. There can only be one default device queue for each device within a 
context. This is equivalent to \c CL_QUEUE_ON_DEVICE_DEFAULT.
*/


/*! 
\enum teuthid::clb::devexec_caps_t
\brief This enumeration includes named constants that identifies execution 
capabilities of the device.
\details This is equivalent to \c cl_device_exec_capabilities.
*/
/*! 
\var teuthid::clb::devexec_caps_t::KERNEL
\hideinitializer
Device can execute OpenCL kernels. This is equivalent to \c CL_EXEC_KERNEL.
*/
/*! 
\var teuthid::clb::devexec_caps_t::NATIVE_KERNEL
\hideinitializer
Device can execute native kernels. This is equivalent to 
\c CL_EXEC_NATIVE_KERNEL.
*/


/*! 
\enum teuthid::clb::devfp_config_t
\brief This enumeration includes named constants that identifies a 
floating-point capability of the OpenCL device.
\details This is equivalent to \c cl_device_fp_config. See 
device::double_fp_config(), device::single_fp_config().
*/
/*! 
\var teuthid::clb::devfp_config_t::DENORM
\hideinitializer
Denorms are supported. This is equivalent to \c CL_FP_DENORM.
*/ 
/*! 
\var teuthid::clb::devfp_config_t::INF_NAN
\hideinitializer
\c INF and <tt>NaN</tt>s are supported. This is equivalent to \c CL_FP_INF_NAN.
*/
/*! 
\var teuthid::clb::devfp_config_t::ROUND_TO_NEAREST
\hideinitializer
Round to nearest even rounding mode supported. This is equivalent to 
\c CL_FP_ROUND_TO_NEAREST.
*/
/*! 
\var teuthid::clb::devfp_config_t::ROUND_TO_ZERO
\hideinitializer
Round to zero rounding mode supported. This is equivalent to 
\c CL_FP_ROUND_TO_ZERO.
*/
/*! 
\var teuthid::clb::devfp_config_t::ROUND_TO_INF
\hideinitializer
Round to positive and negative infinity rounding modes supported. This is 
equivalent to \c CL_FP_ROUND_TO_INF.
*/
/*! 
\var teuthid::clb::devfp_config_t::FMA
\hideinitializer
IEEE754-2008 fused multiply-add is supported. This is equivalent to 
\c CL_FP_FMA.
*/
/*! 
\var teuthid::clb::devfp_config_t::SOFT_FLOAT
\hideinitializer
Basic floating-point operations (such as addition, subtraction, multiplication) 
are implemented in software. This is equivalent to \c CL_FP_SOFT_FLOAT.
*/
/*! 
\var teuthid::clb::devfp_config_t::CORRECTLY_ROUNDED_DIVIDE_SQRT
\hideinitializer
Divide and \c sqrt are correctly rounded as defined by the IEEE754 
specification. This is equivalent to \c CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT.
*/


/*! 
\enum teuthid::clb::devlocal_mem_t
\brief This enumeration includes named constants that identifies a type of 
local memory supported.
\details This is equivalent to \c cl_device_local_mem_type.
*/
/*! 
\var teuthid::clb::devlocal_mem_t::LOCAL
\hideinitializer
Indicates the dedicated local memory storage such as SRAM. This is equivalent 
to \c CL_LOCAL.
*/
/*! 
\var teuthid::clb::devlocal_mem_t::GLOBAL
\hideinitializer
Indicates the global memory storage. This is equivalent to \c CL_GLOBAL.
*/
/*! 
\var teuthid::clb::devlocal_mem_t::NONE
\hideinitializer
*/

/*! 
\enum teuthid::clb::devmem_cache_t
\brief This enumeration includes named constants that identifies a type of 
global memory cache supported.
\details This is equivalent to \c cl_device_mem_cache_type.
*/
/*! 
\var teuthid::clb::devmem_cache_t::READ_ONLY_CACHE
\hideinitializer
This is equivalent to \c CL_READ_ONLY_CACHE.
*/
/*! 
\var teuthid::clb::devmem_cache_t::READ_WRITE_CACHE
\hideinitializer
This is equivalent to \c CL_READ_WRITE_CACHE.
*/
/*! 
\var teuthid::clb::devmem_cache_t::NONE
\hideinitializer
*/


/*! 
\enum teuthid::clb::devprofile_t
\brief This enumeration includes named constants that identifies the profile 
supported by the device.
\details See device::profile(), platform::profile().
*/
/*! 
\var teuthid::clb::devprofile_t::FULL
Indicates that the device supports the OpenCL specification (functionality 
defined as part of the core specification and does not require any extensions 
to be supported). See device::is_full_profile(), platform::is_full_profile().
*/
/*! 
\var teuthid::clb::devprofile_t::EMBEDDED
Indicates that the device supports the OpenCL embedded profile. See 
device::is_embedded_profile(), platform::is_embedded_profile().
*/


/*! 
\enum teuthid::clb::devsvm_capabilities_t
\brief This enumeration includes named constants that identifies various shared 
virtual memory allocation types.
\details This is equivalent to \c cl_device_svm_capabilities.
*/
/*! 
\var teuthid::clb::devsvm_capabilities_t::COARSE_GRAIN_BUFFER
\hideinitializer
Indicates the support for coarse-grain buffer sharing. This is equivalent to 
\c CL_DEVICE_SVM_COARSE_GRAIN_BUFFER.
*/
/*! 
\var teuthid::clb::devsvm_capabilities_t::FINE_GRAIN_BUFFER
\hideinitializer
Indicates the support for fine-grain buffer sharing. This is equivalent to 
\c CL_DEVICE_SVM_FINE_GRAIN_BUFFER.
*/
/*! 
\var teuthid::clb::devsvm_capabilities_t::FINE_GRAIN_SYSTEM
\hideinitializer
Indicates the support for sharing the host’s entire virtual memory including 
memory allocated using malloc. Memory consistency is guaranteed at 
synchronization points. This is equivalent to 
\c CL_DEVICE_SVM_FINE_GRAIN_SYSTEM.
*/
/*! 
\var teuthid::clb::devsvm_capabilities_t::ATOMICS
\hideinitializer
Indicates the support for the atomic operations that provide memory consistency 
across the host and all OpenCL devices supporting fine-grain SVM allocations.
This is equivalent to \c CL_DEVICE_SVM_ATOMICS.
*/


/*! 
\enum teuthid::clb::devtype_t
\brief This enumeration includes named constants that identifies the type of 
device. 
\details This is equivalent to \c cl_device_type. See device::devtype(), 
device::is_devtype(). 
*/
/*! 
\var teuthid::clb::devtype_t::CPU
\hideinitializer
An OpenCL device that is the host processor. The host processor runs the OpenCL 
implementations and is a single or multi-core CPU. This is equivalent to 
\c CL_DEVICE_TYPE_CPU. See device::is_cpu(). 
*/
/*! 
\var teuthid::clb::devtype_t::GPU
\hideinitializer
An OpenCL device that is a GPU. By this we mean that the device can also be 
used to accelerate a 3D API such as OpenGL or DirectX. This is equivalent to 
\c CL_DEVICE_TYPE_GPU. See device::is_gpu(). 
*/
/*! 
\var teuthid::clb::devtype_t::ACCELERATOR
\hideinitializer
Dedicated OpenCL accelerators. These devices communicate with the host 
processor using a peripheral interconnect such as PCIe. This is equivalent to 
\c CL_DEVICE_TYPE_ACCELERATOR.
*/
/*! 
\var teuthid::clb::devtype_t::CUSTOM
\hideinitializer
Dedicated accelerators that do not support programs written in OpenCL C. This 
is equivalent to \c CL_DEVICE_TYPE_CUSTOM.
*/
/*! 
\var teuthid::clb::devtype_t::DEFAULT
\hideinitializer
The default OpenCL device in the system. The default device cannot be a 
devtype_t::CUSTOM device. This is equivalent to \c CL_DEVICE_TYPE_DEFAULT.
*/
/*! 
\var teuthid::clb::devtype_t::ALL
\hideinitializer
All OpenCL devices available in the system except devtype_t::CUSTOM devices. 
This is equivalent to \c CL_DEVICE_TYPE_ALL.
*/


/*! 
\typedef typedef cl_device_id teuthid::clb::device_id_t
\brief This is a type alias for \c cl_device_id.
\details \see device::id(), device::parent_id().
*/
/*! 
\typedef typedef cl_platform_id teuthid::clb::platform_id_t
\brief This is a type alias for \c cl_platform_id.
\details \see platform::id().
*/
/*! 
\typedef std::vector<std::string> teuthid::clb::extensions_t
\brief This is a type alias for the vector containing strings.
\details \see device::extensions(), platform::extensions()
*/
/*! 
\typedef std::vector<std::string> teuthid::clb::built_in_kernels_t
\brief This is a type alias for the vector containing strings.
\details \see device::built_in_kernels().
*/
/*! 
\typedef std::vector<std::size_t> teuthid::clb::max_work_item_sizes_t
\brief This is a type alias for the vector containing values of type 
\c std::size_t.
*/
/*! 
\typedef std::vector<intptr_t> teuthid::clb::partition_properties_t
\brief This is a type alias for the vector containing values of type 
\c intptr_t.
*/
/*! 
\typedef std::vector<std::string> teuthid::clb::devices_t
\brief This is a type alias for the vector containing objects of class 
clb::device.
*/


/*! 
\class teuthid::clb::device device.hpp <teuthid/clb/device.hpp>
\brief This class holds specific information about the OpenCL devices for a 
particular OpenCL \ref teuthid::clb::platform "platform".
\details <a href="https://www.khronos.org/opencl/">OpenCL</a> is used as an 
interface for executing code on parallel devices such as GPUs and multi-core 
CPUs.
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
\see device::get_default(), platform::devices().
*/


/*!
\fn teuthid::clb::device::device(const device &)
\brief Default copy constructor.
*/
/*!
\fn teuthid::clb::device::device(device &&)
\brief Default move constructor.
*/
/*!
\fn device::~device()
\brief Default destructor.
*/
/*!
\fn device &teuthid::clb::device::operator=(const device &)
\brief Default copy assignment operator.
*/
/*!
\fn device &teuthid::clb::device::operator=(device &&)
\brief Default move assignment operator.
*/


/*!
\fn template <devparam_t value> device_param<value>::value_type device::info() const
\brief Gets specific information about the device.
@param value a device query - see clb::devparam_t.
\throw invalid_device if \c value is an invalid parameter.
\return the device's parameter.
*/


/*! 
\fn device_id_t device::id() const noexcept
\brief Returns the identifier of this device.
\return the identifier for this OpenCL device. The returned value is the 
equivalent of \c cl_device_id.
\see device::find_by_id(), device::parent_id().
*/


/*!
\fn device_id_t device::parent_id() const noexcept
\brief Returns the identifier of the parent device. 
\return Returns the identifier of the parent device to which this sub-device 
belongs. If this device is a root-level device, a \c nullptr value is returned.
\see device::is_subdevice(), device::id().
*/


/*!
\fn bool device::is_subdevice() const noexcept
\brief Checks that this device is a sub-device.
\return \c true if this device is a sub-device. Otherwise returns \c false.
\see device::parent_id(), device::subdevices().
*/


/*!
\fn devices_t device::subdevices(std::size_t units) const
\brief Creates an array of sub-devices that each reference a non-intersecting 
set of compute units within this device.
\details Splits the aggregate device into as many smaller aggregate devices as 
can be created, each containing compute \c units. If \c units does not divide 
evenly into device::max_compute_units(), then the remaining compute units are 
not used.
\return a vector containing of sub-devices.
@param[in] units count of compute units for every sub-device.
\throw invalid_device if cannot create sub-devices.
\see device::is_subdevice(), device::parent_id(), device::max_subdevices().
*/


/*!
\fn devices_t device::subdevices(std::vector<std::size_t> units) const
\brief Creates an array of sub-devices that each reference a non-intersecting 
set of compute units within this device.
\details For each nonzero count <em>units[n]</em> in the vector \c units, a 
sub-device is created with <em>units[n]</em> compute units in it. The number of 
non-zero count entries in the vector \c units may not exceed 
device::max_subdevices(). The total number of compute units specified may not 
exceed device::max_compute_units().
\return a vector containing of sub-devices.
@param[in] units a vector of counts of compute units for each sub-device.
\throw invalid_device if cannot create sub-devices.
\see device::is_subdevice(), device::parent_id().
*/


/*!
\fn const platform &device::get_platform() const
\brief Gets the platform associated with this device.
\return a reference to the platform associated with this device.
*/


/*!
\fn uint32_t device::address_bits() const
\brief Gets the default compute device address space size.
\return the default compute device address space size specified as \c uint32_t 
value in bits. Currently supported values are 32 or 64 bits. The returned value 
is the equivalent of \c CL_DEVICE_ADDRESS_BITS.
*/


/*!
\fn bool device::is_available() const
\brief Checks if this device is available.
\return \c true if this device is available and \c false otherwise. A device is 
considered to be available if the device can be expected to successfully 
execute commands enqueued to the device. The returned value is the equivalent 
of \c CL_DEVICE_AVAILABLE.
*/


/*!
\fn built_in_kernels_t device::built_in_kernels() const
\brief Gets the vector of built-in kernels supported by this device.
\return a vector containing built-in kernels supported by this device. An empty 
vector is returned if no built-in kernels are supported by the device. The 
returned value is the equivalent of \c CL_DEVICE_BUILT_IN_KERNELS.
*/


/*!
\fn std::string device::c_version() const
\brief Gets OpenCL C version string. 
\return the highest OpenCL C version supported by the compiler for this device 
that is not of type devtype_t::CUSTOM. This version string has the following 
format: 
<em><major_version.minor_version><space><vendor-specific information></em>.
The returned value is the equivalent of \c CL_DEVICE_OPENCL_C_VERSION.
*/


/*!
\fn bool device::is_compiler_available() const
\brief Checks if the compiler is available.
\return \c false if the implementation does not have a compiler available to 
compile the program source. Returns \c true if the compiler is available. This 
can be \c false for the embedded platform profile only. The returned value is 
the equivalent of \c CL_DEVICE_COMPILER_AVAILABLE.
*/


/*!
\fn devfp_config_t device::double_fp_config() const
\brief Checks double precision floating-point capability of this device.
\return a clb::devfp_config_t value that describes double precision floating-point capability of this device. Double precision is an optional feature. The returned value is the equivalent of \c CL_DEVICE_DOUBLE_FP_CONFIG.
\see device::has_double_precision().
*/


/*!
\fn bool device::has_double_precision() const
\brief Checks double precision floating-point capability of this device.
\return \c true if this device has support for double precision floating-point.
Otherwise returns \c false. 
\see device::double_fp_config(), device::has_single_precision().
*/


/*!
\fn extensions_t device::extensions() const
\brief Gets of extension names supported by this device.
\return a vector containing extension names supported by this device. The 
vector of extension names returned can be vendor supported extension names and 
one or more of the Khronos approved extension names.
\see device::has_extension().
*/


/*!
\fn bool device::has_extension(const std::string &ext_name) const
\brief Check if this device support the extension.
\return \c true if this device support the extension with name \c ext_name. 
Otherwise returns \c false.
@param[in] ext_name a string containing the checked extension name.
\see device::extensions().
*/


/*!
\fn uint64_t device::global_mem_cache_size() const
\brief Gets the size of global memory cache.
\return the size of global memory cache in bytes. The returned value is the 
equivalent of \c CL_DEVICE_GLOBAL_MEM_CACHE_SIZE.
*/


/*!
\fn devmem_cache_t device::global_mem_cache_type() const
\brief Checks the type of global memory cache supported.
\return a value of type clb::devmem_cache_t that describes the type of global 
memory cache supported. The returned value is the equivalent of 
\c CL_DEVICE_GLOBAL_MEM_CACHE_TYPE.
*/


/*!
\fn uint32_t device::global_mem_cacheline_size() const
\brief Gets the size of global memory cache line.
\return the size of global memory cache line in bytes. The returned value is 
the equivalent of \c CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE.
*/


/*!
\fn uint64_t device::global_mem_size() const
\brief Gets the size of global device memory.
\return the size of global device memory in bytes. The returned value is the 
equivalent of \c CL_DEVICE_GLOBAL_MEM_SIZE.
*/


/*!
\fn uint64_t device::local_mem_size() const
\brief Gets the size of local memory region.
\return the size of local memory region in bytes. The minimum value is 32 KB 
for devices that are not of type devtype_t::CUSTOM. The returned value is the 
equivalent of \c CL_DEVICE_LOCAL_MEM_SIZE.
*/


/*!
\fn devlocal_mem_t device::local_mem_type() const
\brief Checks the type of local memory supported.
\return devlocal_mem_t::LOCAL implying dedicated local memory storage such as 
SRAM, or devlocal_mem_t::GLOBAL. For custom devices, devlocal_mem_t::NONE can 
also be returned indicating no local memory support. The returned value is the 
equivalent of \c CL_DEVICE_LOCAL_MEM_TYPE.
*/


/*!
\fn uint32_t device::max_clock_frequency() const
\brief Gets the maximum configured clock frequency.
\return the maximum configured clock frequency of this device in MHz. The 
returned value is the equivalent of \c CL_DEVICE_MAX_CLOCK_FREQUENCY.
*/

/*!
\fn uint32_t device::max_compute_units() const
\brief Gets the number of parallel compute units.
\return the number of parallel compute units on this OpenCL device. A 
work-group executes on a single compute unit. The minimum value is \c 1. The 
returned value is the equivalent of \c CL_DEVICE_MAX_COMPUTE_UNITS.
*/


/*!
\fn uint32_t device::max_constant_args() const
\brief Gets the maximum number of arguments declared with the \c __constant 
qualifier in a kernel.
\return the maximum number of arguments declared with the \c __constant 
qualifier in a kernel. The minimum value is \c 8 for devices that are not of 
type devtype_t::CUSTOM. The returned value is the equivalent of 
\c CL_DEVICE_MAX_CONSTANT_ARGS.
*/


/*!
\fn uint64_t device::max_constant_buffer_size() const
\brief Gets the maximum size of a constant buffer allocation.
\return the maximum size in bytes of a constant buffer allocation. The minimum 
value is 64 KB for devices that are not of type devtype_t::CUSTOM. The returned 
value is the equivalent of \c CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE.
*/


/*!
\fn uint64_t device::max_mem_alloc_size() const
\brief Gets the maximum size of memory object allocation.
\return the maximum size of memory object allocation in bytes. The minimum 
value is 
<em>max(min(1024*1024*1024, 1/4th of global_mem_size()), 32*1024*1024)</em> for 
devices that are not of type devtype_t::CUSTOM. The returned value is the 
equivalent of \c CL_DEVICE_MAX_MEM_ALLOC_SIZE.
*/


/*!
\fn uint32_t device::max_on_device_events() const
\brief Gets the maximum number of events in use.
\return the maximum number of events in use by a device queue. These refer to 
events returned by the \c enqueue_ built-in functions to a device queue or user 
events returned by the \c create_user_event built-in function that have not 
been released. The minimum value is \c 1024. The returned value is the 
equivalent of \c CL_DEVICE_MAX_ON_DEVICE_EVENTS.
*/


/*!
\fn uint32_t device::max_on_device_queues() const
\brief Gets the maximum number of device queues that can be created per context.
\return the maximum number of device queues that can be created per context. 
The minimum value is \c 1. The returned value is the equivalent of 
\c CL_DEVICE_MAX_ON_DEVICE_QUEUES.
*/


/*!
\fn std::size_t device::max_parameter_size() const
\brief Gets the maximum size of all arguments that can be passed to a kernel.
\return the maximum size in bytes of all arguments that can be passed to a 
kernel. The minimum value is \c 1024 for devices that are not of type 
devtype_t::CUSTOM. For this minimum value, only a maximum of \c 128 arguments 
can be passed to a kernel. The returned value is the equivalent of 
\c CL_DEVICE_MAX_PARAMETER_SIZE.
*/


/*!
\fn uint32_t device::max_pipe_args() const
\brief Gets the maximum number of pipe objects that can be passed as arguments 
to a kernel.
\return the maximum number of pipe objects that can be passed as arguments to a 
kernel. The minimum value is \c 16. The returned value is the equivalent of 
\c CL_DEVICE_MAX_PIPE_ARGS.
*/


/*!
\fn uint32_t device::max_subdevices() const
\brief Gets the maximum number of sub-devices.
\return the maximum number of sub-devices that can be created when this device 
is partitioned. The value returned cannot exceed device::max_compute_units().
The returned value is the equivalent of \c CL_DEVICE_PARTITION_MAX_SUB_DEVICES.
*/


/*!
\fn std::size_t device::max_work_group_size() const
\brief Gets the maximum number of work-items in a work-group executing a kernel 
on a single compute unit.
\return the maximum number of work-items in a work-group executing a kernel on 
a single compute unit, using the data parallel execution model. The minimum 
value is \c 1. The returned value is the equivalent of 
\c CL_DEVICE_MAX_WORK_GROUP_SIZE.
*/


/*!
\fn uint32_t device::max_work_item_dimensions() const
\brief Gets the maximum dimensions that specify the global and local work-item 
IDs.
\return the maximum dimensions that specify the global and local work-item IDs 
used by the data parallel execution model. The minimum value is \c 3 for 
devices that are not of type devtype_t::CUSTOM. The returned value is the 
equivalent of \c CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS.
*/


/*!
\fn max_work_item_sizes_t device::max_work_item_sizes() const
\brief Gets the maximum number of work-items that can be specified in each 
dimension of the work-group to execute a kernel on this device.
\return the maximum number of work-items that can be specified in each 
dimension of the work-group to execute a kernel on this device. Returns \e n 
\c std::size_t entries, where \e n is the value returned by the query for 
device::max_work_item_dimensions(). The minimum value is <tt>(1, 1, 1)</tt> for 
devices that are not of type devtype_t::CUSTOM. The returned value is the 
equivalent of \c CL_DEVICE_MAX_WORK_ITEM_SIZES.
*/


/*!
\fn uint32_t device::mem_base_addr_align() const
\brief Gets the alignment in bits of the base address of any allocated memory 
object.
\return the minimum value is the size (in bits) of the largest OpenCL built-in 
data type supported by this device for devices that are not of type 
devtype_t::CUSTOM. The returned value is the equivalent of 
\c CL_DEVICE_MEM_BASE_ADDR_ALIGN.
*/





/*! \fn const compute_profile_t &compute_device::profile() const
 * \brief Returns the OpenCL device's profile.
 *
 * \return the OpenCL profile supported by this OpenCL device. It can be one 
 * of the following: 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE",
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE", or
 * \ref teuthid::COMPUTE_UNKNOWN_PROFILE "COMPUTE_UNKNOWN_PROFILE".
 * The returned value is the equivalent of \c CL_DEVICE_PROFILE.
 * \see is_full_profile(), is_embedded_profile().
 */

/*! \fn bool compute_device::is_full_profile() const
 * \brief Returns \c true if this device's profile is 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE".
 * 
 * \return \c true if this OpenCL device's profile is 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE". Otherwise returns 
 * \c false.
 * \see profile().
 */


/*! \fn bool compute_device::is_embedded_profile() const
 * \brief Returns \c true if the device's profile is 
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE".
 * 
 * \return \c true if this OpenCL device's profile is 
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE". Otherwise 
 * returns \c false.
 * \see profile().
 */


/*! \fn const compute_devtype_t &compute_device::devtype() const
 * \brief Returns a type of this device.
 * \return a type of this OpenCL device. It can be one of the following:
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_CPU",
 * \ref teuthid::COMPUTE_DEVICE_GPU "COMPUTE_DEVICE_GPU",
 * \ref teuthid::COMPUTE_DEVICE_ACCELERATOR "COMPUTE_DEVICE_ACCELERATOR",
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_UNKNOWN". 
 * \see is_devtype_cpu(), is_devtype_gpu(), is_devtype_accelerator().
 */


/*! \fn bool compute_device::is_devtype_cpu() const
 * \brief Returns \c true if this device's type is 
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_CPU".
 * \return \c true if this OpenCL device's type is 
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_CPU". Otherwise returns
 * \c false.
 * \see devtype().
 */


/*! \fn bool compute_device::is_devtype_gpu() const
 * \brief Returns \c true if this device's type is 
 * \ref teuthid::COMPUTE_DEVICE_GPU "COMPUTE_DEVICE_GPU".
 * \return \c true if this OpenCL device's type is 
 * \ref teuthid::COMPUTE_DEVICE_GPU "COMPUTE_DEVICE_GPU". Otherwise returns
 * \c false.
 * \see devtype().
 */


/*! \fn const std::string &compute_device::name() const
 * \brief Return the name of this device.
 *
 * \return the name of this OpenCL device. The returned value is the 
 * equivalent of \c CL_DEVICE_NAME. If it is an empty string, a name of this 
 * OpenCL device is undetermined.
 */


/*! \fn const std::string &compute_device::version() const
 * \brief Returns the device's version.
 *
 * \return the OpenCL version supported by this OpenCL device.\n
 * The returned value has the following format:
 * \e "OpenCL<space><major_version.minor_version><space><platform-specific information>".\n
 * The \e "major_version.minor_version" determines a version of OpenCL 
 * supported by this OpenCL device.\n
 * The returned value is the equivalent of \c CL_DEVICE_VERSION.
 * If it is an empty string, an OpenCL version supported by this OpenCL device 
 * is undetermined.
 * \see driver_version(), c_version().
 */


/*! \fn const std::string &compute_device::driver_version() const
 * \brief Returns the software driver version of this device.
 *
 * \return the OpenCL software driver version of this OpenCL device.
 * The returned value is the equivalent of \c CL_DRIVER_VERSION.
 * If it is an empty string, a version is undetermined.
 * \see version().
 */
