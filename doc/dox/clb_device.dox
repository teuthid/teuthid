/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/


/*! \enum teuthid::clb::devparam_t
 * \brief This enumeration includes named constants that identifies 
 * the OpenCL device information being queried.
 */
/*! \var teuthid::clb::ADDRESS_BITS
 * The default compute device address space size of the global address space 
 * specified as \c uint32_t value in bits. This is equivalent to 
 * \c CL_DEVICE_ADDRESS_BITS. See clb::device::address_bits().
 */
/*! \var teuthid::clb::AVAILABLE
 * Is \c true if the device is available and \c false otherwise. A device is 
 * considered to be available if the device can be expected to successfully 
 * execute commands enqueued to the device. This is equivalent to 
 * \c CL_DEVICE_AVAILABLE. See clb::device::is_available().
 */
/*! \var teuthid::clb::BUILT_IN_KERNELS
 * A teuthid::clb::built_in_kernels_t list of built-in kernels supported by the 
 * device. An empty list is returned if no built-in kernels are supported by 
 * the device. This is equivalent to \c CL_DEVICE_BUILT_IN_KERNELS.
 * See clb::device::built_in_kernels().
 */
/*! \var teuthid::clb::COMPILER_AVAILABLE
 * Is \c false if the implementation does not have a compiler available to 
 * compile the program source. Is \c true if the compiler is available. This 
 * can be \c false for the embedded platform profile only. This is equivalent 
 * to \c CL_DEVICE_COMPILER_AVAILABLE. See clb::device::is_compiler_available(),
 * clb::device::profile().
 */ 
/*! \var teuthid::clb::DOUBLE_FP_CONFIG
 * Describes double precision floating-point capability of the OpenCL device 
 * as a teuthid::clb::devfp_config_t value. Double precision is an optional 
 * feature. This is equivalent to \c CL_DEVICE_DOUBLE_FP_CONFIG.
 * See clb::device::double_fp_config(), clb::device::has_double_precision().
 */
/*! \var teuthid::clb::ENDIAN_LITTLE
 * Is \c true if the OpenCL device is a little endian device and \c false 
 * otherwise. This is equivalent to \c CL_DEVICE_ENDIAN_LITTLE.
 */
/*! \var teuthid::clb::ERROR_CORRECTION_SUPPORT
 * Is \c true if the device implements error correction for all accesses to 
 * compute device memory (global and constant). Is \c false if the device does 
 * not implement such error correction. This is equivalent to 
 * \c CL_DEVICE_ERROR_CORRECTION_SUPPORT.
 */
/*! \var teuthid::clb::EXECUTION_CAPABILITIES
 * Describes the execution capabilities of the device as a 
 * teuthid::clb::devexec_caps_t value. This is equivalent to 
 * \c CL_DEVICE_EXECUTION_CAPABILITIES.
 */ 
/*! \var teuthid::clb::EXTENSIONS
 * Returns a teuthid::clb::extensions_t list of extension names (the extension 
 * names themselves do not contain any spaces) supported by the device. The 
 * list of extension names returned can be vendor supported extension names and 
 * one or more of the Khronos approved extension names. This is equivalent to 
 * \c CL_DEVICE_EXTENSIONS. See clb::device::extensions(), 
 * clb::device::has_extension().
 */


/*! \enum teuthid::compute_profile_t
 * \brief This enumeration includes named constants of OpenCL platform's 
 * or device's profile.
 *
 * \see compute_platform::profile(), compute_platform::is_full_profile(), 
 * compute_platform::is_embedded_profile().
 */
/*! \var teuthid::COMPUTE_FULL_PROFILE
 * Identifies a platform or device which supports the OpenCL 
 * <a href="https://www.khronos.org/registry/OpenCL/">specification</a>
 * (functionality defined as part of the core specification and does not 
 * require any extensions to be supported).
 */
/*! \var teuthid::COMPUTE_EMBEDDED_PROFILE
 * Identifies a platform or device which supports the OpenCL embedded 
 * profile. The embedded profile is defined to be a subset for each version of 
 * OpenCL.
 */
/*!
 * \var teuthid::COMPUTE_UNKNOWN_PROFILE
 * Unknown OpenCL platform's or device's profile (is undetermined).
 */


/*! \enum teuthid::compute_devtype_t
 * \brief This enumeration includes named constants of OpenCL device's type.
 *
 * Currently supported values are: 
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_CPU",
 * \ref teuthid::COMPUTE_DEVICE_GPU "COMPUTE_DEVICE_GPU",
 * \ref teuthid::COMPUTE_DEVICE_ACCELERATOR "COMPUTE_DEVICE_ACCELERATOR".
 * \see compute_device::devtype(), compute_device::is_devtype_cpu(), 
 * compute_device::is_devtype_gpu(), compute_device::is_devtype_accelerator().
 */
/*! \var teuthid::COMPUTE_DEVICE_CPU
 * Identifies an OpenCL device that is the host processor. The host processor 
 * runs the OpenCL implementations and is a single or multi-core CPU.
 */
/*! \var teuthid::COMPUTE_DEVICE_GPU
 * Identifies an OpenCL device that is a GPU - a device that can also be used 
 * to accelerate a 3D API such as OpenGL or DirectX.
 */
/*! \var teuthid::COMPUTE_DEVICE_ACCELERATOR
 * Identifies dedicated OpenCL accelerators. These devices communicate with the 
 * host processor using a peripheral interconnect such as PCIe.
 */
/*! \var teuthid::COMPUTE_DEVICE_UNKNOWN
 * Unknown OpenCL device's type (is undetermined).
 */


/*! \class teuthid::compute_device compute_device.hpp \ 
<teuthid/compute_device.hpp>
 * \brief This class holds specific information about the OpenCL
 * devices for a particular OpenCL \ref teuthid::compute_platform "platform".
 *
 * <a href="https://www.khronos.org/opencl/">OpenCL</a> is used as an interface 
 * for executing code on parallel devices such as GPUs and multi-core CPUs.
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 * \see compute_platform::devices().
 */

/*! \fn teuthid::compute_device::compute_device()
 * \brief Constructs a new object of class compute_device.
 *
 * The new object is empty and <b>does not</b> contain information about any
 * OpenCL device.
 */

/*! \fn compute_device::~compute_device()
 * \brief Destructs an object of class compute_device.
 */


/*! \fn const compute_device_id_t &compute_device::id() const
 * \brief Returns the identifier for this device.
 *
 * \return the identifier for this OpenCL device. The returned value is the 
 * equivalent of \c cl_device_id. If it is equal to \c NULL, this OpenCL device 
 * is undetermined.
 */


/*! \fn const compute_profile_t &compute_device::profile() const
 * \brief Returns the OpenCL device's profile.
 *
 * \return the OpenCL profile supported by this OpenCL device. It can be one 
 * of the following: 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE",
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE", or
 * \ref teuthid::COMPUTE_UNKNOWN_PROFILE "COMPUTE_UNKNOWN_PROFILE".
 * The returned value is the equivalent of \c CL_DEVICE_PROFILE.
 * \see is_full_profile(), is_embedded_profile().
 */

/*! \fn bool compute_device::is_full_profile() const
 * \brief Returns \c true if this device's profile is 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE".
 * 
 * \return \c true if this OpenCL device's profile is 
 * \ref teuthid::COMPUTE_FULL_PROFILE "COMPUTE_FULL_PROFILE". Otherwise returns 
 * \c false.
 * \see profile().
 */


/*! \fn bool compute_device::is_embedded_profile() const
 * \brief Returns \c true if the device's profile is 
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE".
 * 
 * \return \c true if this OpenCL device's profile is 
 * \ref teuthid::COMPUTE_EMBEDDED_PROFILE "COMPUTE_EMBEDDED_PROFILE". Otherwise 
 * returns \c false.
 * \see profile().
 */


/*! \fn const compute_devtype_t &compute_device::devtype() const
 * \brief Returns a type of this device.
 * \return a type of this OpenCL device. It can be one of the following:
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_CPU",
 * \ref teuthid::COMPUTE_DEVICE_GPU "COMPUTE_DEVICE_GPU",
 * \ref teuthid::COMPUTE_DEVICE_ACCELERATOR "COMPUTE_DEVICE_ACCELERATOR",
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_UNKNOWN". 
 * \see is_devtype_cpu(), is_devtype_gpu(), is_devtype_accelerator().
 */


/*! \fn bool compute_device::is_devtype_cpu() const
 * \brief Returns \c true if this device's type is 
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_CPU".
 * \return \c true if this OpenCL device's type is 
 * \ref teuthid::COMPUTE_DEVICE_CPU "COMPUTE_DEVICE_CPU". Otherwise returns
 * \c false.
 * \see devtype().
 */


/*! \fn bool compute_device::is_devtype_gpu() const
 * \brief Returns \c true if this device's type is 
 * \ref teuthid::COMPUTE_DEVICE_GPU "COMPUTE_DEVICE_GPU".
 * \return \c true if this OpenCL device's type is 
 * \ref teuthid::COMPUTE_DEVICE_GPU "COMPUTE_DEVICE_GPU". Otherwise returns
 * \c false.
 * \see devtype().
 */


/*! \fn bool compute_device::is_devtype_accelerator() const
 * \brief Returns \c true if this device's type is 
 * \ref teuthid::COMPUTE_DEVICE_ACCELERATOR "COMPUTE_DEVICE_ACCELERATOR".
 * \return \c true if this OpenCL device's type is 
 * \ref teuthid::COMPUTE_DEVICE_ACCELERATOR "COMPUTE_DEVICE_ACCELERATOR". 
 * Otherwise returns \c false.
 * \see devtype().
 */


/*! \fn const std::string &compute_device::name() const
 * \brief Return the name of this device.
 *
 * \return the name of this OpenCL device. The returned value is the 
 * equivalent of \c CL_DEVICE_NAME. If it is an empty string, a name of this 
 * OpenCL device is undetermined.
 */


/*! \fn const std::string &compute_device::version() const
 * \brief Returns the device's version.
 *
 * \return the OpenCL version supported by this OpenCL device.\n
 * The returned value has the following format:
 * \e "OpenCL<space><major_version.minor_version><space><platform-specific information>".\n
 * The \e "major_version.minor_version" determines a version of OpenCL 
 * supported by this OpenCL device.\n
 * The returned value is the equivalent of \c CL_DEVICE_VERSION.
 * If it is an empty string, an OpenCL version supported by this OpenCL device 
 * is undetermined.
 * \see driver_version(), c_version().
 */


/*! \fn const std::string &compute_device::driver_version() const
 * \brief Returns the software driver version of this device.
 *
 * \return the OpenCL software driver version of this OpenCL device.
 * The returned value is the equivalent of \c CL_DRIVER_VERSION.
 * If it is an empty string, a version is undetermined.
 * \see version().
 */


/*! \fn const std::string &compute_device::c_version() const
 * \brief Returns the OpenCL C version string.
 *
 * \return the highest OpenCL C version supported by the compiler for this 
 * device that is not of type \c CL_DEVICE_TYPE_CUSTOM. \n
 * This version string has the following format:
 * \e "OpenCL<space>C<space><major_version.minor_version><space><vendor-specific information>".\n
 * The returned value is the equivalent of \c CL_DEVICE_OPENCL_C_VERSION.
 * If it is an empty string, a version is undetermined.
 * \see version().
 */


/*! \fn uint32_t compute_device::max_compute_units() const
 * \brief Returns the number of parallel compute units.
 *
 * \return the number of parallel compute units on this OpenCL device. 
 * A work-group executes on a single compute unit. The minimum value is \c 1.\n
 * The returned value is the equivalent of \c CL_DEVICE_MAX_COMPUTE_UNITS.
 * If it is equal to \c 0, a number of units is undetermined.
 */


/*! \fn const std::string &compute_device::extensions() const
 * \brief Returns the space-separated list of extension names.
 *
 * \return the space separated list of extension names (the extension names 
 * themselves do not contain any spaces) supported by this device. The list of 
 * extension names returned can be vendor supported extension names and one or 
 * more of the Khronos approved extension names. \n
 * The returned value is the equivalent of \c CL_DEVICE_EXTENSIONS.
 * If it is an empty string, these extensions are undetermined.
 */


