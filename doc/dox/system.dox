/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/

/*! 
\file system.hpp 
*/ 


/*! 
\class teuthid::system system.hpp <teuthid/system.hpp>
\brief This class includes a number of functions that control the framework and 
provide information about its settings. 
\details In addition, this class also includes a set of general-purpose 
functions such as functions for converting numeric values to strings and vice 
versa (system::to_string(), system::from_string()), math functions 
(system::equal_to(), system::less_than(), system::is_finite()). 
\n All functions that provides class teuthid::system are static.
*/


/*! 
\fn static constexpr uint8_t system::major_version()
\brief Gets the major version.
\return the major version of the framework.
\see system::version().
*/


/*! 
\fn static constexpr uint8_t system::minor_version()
\brief Gets the minor version.
\return the minor version of the framework.
\see system::version().
*/


/*! 
\fn static constexpr uint8_t system::patch_version()
\brief Gets the patch version.
\return the patch version of the framework.
\see system::version().
*/

/*! 
\fn static constexpr uint8_t system::soversion()
\brief Gets the soversion of shared libraries.
\return the soversion of the framework shared libraries.
\see system::version().
*/


/*! 
\fn static const std::string &system::version()
\brief Gets the version as string.
\return the version of the framework as a string that has the following format: 
\e "<major_version>.<minor_version>.<patch_version>".
\see system::major_version(), system::minor_version(), system::patch_version(), 
system::check_version().
*/


/*! 
\fn static bool system::check_version(uint8_t major, uint8_t minor)
\brief Checks whether a version of the framework is sufficient. 
\return \c true if a version of the framewrok is a sufficient version. 
Otherwise return \c false. 
@param[in] major The required minimum major version of the framework.
@param[in] minor The required minimum minor version of the framework (if the 
major version is the same as required \c major).
\see system::major_version(), system::minor_version(), system::version().
*/ 


/*! 
\fn static bool system::has_cl_backend()
\brief Checks whether the framework can use OpenCL compute kernels.
\return \c true if the framework can use OpenCL compute kernels - the system 
must have at least one properly working OpenCL platform with one properly 
working OpenCL device. Otherwise, return \c false.
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
\see system::uses_cl_backend().
*/


/*! 
\fn static bool teuthid::system::uses_cl_backend()
\brief Checks whether the framework uses OpenCL compute kernels.
\return \c true if the framework uses OpenCL compute kernels. Otherwise, return 
\c false.
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
\see system::uses_cl_backend(bool), system::has_cl_backend().
*/


/*! 
\fn static bool system::uses_cl_backend(bool enabled)
\brief Enables or disables the possibility to use OpenCL compute kernels.
@param[in] enabled enables (if it is equal to \c true) or disables (if it is 
equal to \c false) the possibility to use OpenCL compute kernels by the 
framework.
\return \c true if the framework uses OpenCL compute kernels. Otherwise, 
return \c false.
\note The Teuthid framework must be compiled with enabled \c BUILD_WITH_OPENCL 
option to be able to use the OpenCL platforms and devices.
\see system::has_cl_backend().
*/


/*! 
\fn template <typename T> static std::string system::to_string(const T &x)
\brief Converts a value of type \c T to a string.
@param[in] x a value of any type except of the array type (like \c char[]) 
or the pointer type (like \c int*, but \c void* is allowed).
\return a string holding the converted value of type \c T.
\note The function has specializations for the following types: \c bool, 
\c int8_t, \c int16_t, \c int32_t, \c int64_t, \c int128_t, \c uint8_t, 
\c uint16_t, \c uint32_t, \c uint64_t, \c uint128_t, \c char, \c char*, 
\c void*, <tt>std::vector<std::string></tt>, \c mpfr_t, 
\ref teuthid::floatmp_base "floatmp_base" and 
\ref teuthid::floatmp "floatmp<Precision>". 
\n For floating point types, the resulted string is formatted according to the 
settings given by the function format_float_output().
\see system::from_string().
*/


/*! 
\fn std::size_t system::split_string(const std::string &s, std::vector<std::string> &v, char delim);
\brief Splits a string by a delimiter.
@param[in] s a string to be split.
@param[in,out] v the result of splitting as a vector of strings.
@param[in] delim the delimiter (default is <tt>' '</tt> - a space).
\return a size of vector containing separated strings.
\note The function ignores empty delimited substrings.
\see system::from_string().
*/


/*! 
\fn static std::streamsize system::default_format_float_precision()
\brief Gets the default precision of floating point output.
\return the default precision (i.e. how many digits are generated) of floating 
point output performed by system::to_string().
\see system::format_float_precision(), system::format_float_output().
*/


/*! 
\fn static void system::format_float_output(std::streamsize precision, bool scientific);
\brief Sets the output format for floating point numbers.
@param[in] precision the precision (i.e. how many digits are generated) of 
floating point output performed by system::to_string().
@param[in] scientific if it is equal to \c true, generates floating point 
output using a scientific notation (for example \c 6.022e+23). Otherwise using 
a fixed notation.
\see system::to_string(), system::default_format_float_precision(), 
system::format_float_precision(), system::format_float_scientific().
*/


/*! 
\fn static std::streamsize system::format_float_precision(std::streamsize precision)
\brief Sets the output precision for floating point numbers.
@param[in] precision the precision (i.e. how many digits are generated) of 
floating point output performed by system::to_string().
\return the previous value of output precision for floating point numbers.
\see system::format_float_output(), system::default_format_float_precision().
*/


/*! 
\fn static bool system::format_float_scientific(bool scientific)
\brief Sets the output notation for floating point numbers.
@param[in] scientific if it is equal to \c true, generates floating point 
output using a scientific notation (for example \c 6.022e+23). Otherwise using 
a fixed notation.
\return the previous valut of output notation for floating point numbers.
\see system::format_float_output().
*/


/*! 
\fn template <typename T> static T &system::from_string(const std::string &s, T &x)
\brief Interprets a value in a string.
\details Discards any whitespace characters (as identified by calling 
\c std::isspace()) and converts all characters to lower case.
@param[in] s the string to convert.
@param[in,out] x the string converted to the specified value of type \c T.
\exception std::invalid_argument if no conversion could be performed.
\exception std::out_of_range if the converted string would fall out of the 
range of the result type \c T.
\return  the string converted to the specified value of type \c T.
\note The function has specializations for the following types: \c bool, 
\c int8_t, \c int16_t, \c int32_t, \c int64_t, \c int128_t, \c uint8_t, 
\c uint16_t, \c uint32_t, \c uint64_t, \c uint128_t, \c float, \c double, 
<tt>long double</tt>, \c mpfr_t, \ref teuthid::floatmp_base "floatmp_base" and 
\ref teuthid::floatmp "floatmp<Precision>".
\see system::to_string().
*/


/*! 
\fn template <typename T> static bool system::equal_to(const T &x, const T &y)
\brief Checks whether \c x is equal to \c y.
@param[in] x a value of type \c T to compare.
@param[in] y a value of type \c T to compare.
\return \c true if \c x == \c y, \c false otherwise.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and 
\ref teuthid::floatmp "floatmp<Precision>".
\n To compare floating point types, this function converts numbers to strings 
according to the current format settings for to_string(). For other types, the 
function behaves just like the \c operator== (for those types for which this 
operator is defined).
\see system::format_float_output(), system::format_float_precision(), 
system::less_than(), system::is_positive(), system::is_negative().
*/


/*! 
\fn template <typename T> static bool system::less_than(const T &x, const T &y)
\brief Checks whether \c x is less than \c y.
@param[in] x a value of type \c T to compare.
@param[in] y a value of type \c T to compare.
\return \c true if \c x < \c y, \c false otherwise.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and 
\ref teuthid::floatmp "floatmp<Precision>".
\n To compare floating point types, this function converts numbers to strings 
according to the current format settings for to_string(). For other types, the 
function behaves just like the \c operator< (for those types for which this 
operator is defined).
\see system::format_float_output(), system::format_float_precision(), 
system::equal_to().
*/


/*!
\fn template <typename E> static constexpr bool system::test_enumerator(E en) noexcept
\brief Tests the value of enumerator.
@param[in] en a value of enumerator. The type \c E should be a complete 
enumeration type (scoped or unscoped). Otherwise, the behavior is undefined.
\return \c true if \c en is different from \c 0, \c false otherwise. 
*/


/*!
\fn template <typename T> static bool system::is_finite(const T &x)
\brief Determines if the floating point number has finite value.
\details Determines if the given floating point number \c x has finite 
value i.e. it is normal, subnormal or zero, but not infinite or NaN.
@param[in] x a floating point value
\return \c true value if \c x has finite value, \c false if \c x is 
infinite or NaN.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t, 
\ref teuthid::floatmp "floatmp<Precision>" and integral types.
\see system::is_infinite(), system::is_nan(), system::is_zero(), 
system::is_positive(), system::is_negative().
*/


/*!
\fn template <typename T> static bool system::is_infinite(const T &x)
\brief Determines if the floating point number is a positive or negative 
infinity.
@param[in] x a floating point value
\return \c true if \c x is infinite, \c false otherwise.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t, 
\ref teuthid::floatmp "floatmp<Precision>" and integral types.
\see system::is_finite().
*/


/*!
\fn template <typename T> static bool system::is_nan(const T &x)
\brief Determines if the floating point number is NaN.
@param[in] x a floating point value
\return \c true if \c x is a NaN, \c false otherwise.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t, 
\ref teuthid::floatmp "floatmp<Precision>" and integral types.
\see system::is_finite().
*/


/*!
\fn template <typename T> static bool system::is_zero(const T &x)
\brief Determines if the floating point number has zero value.
@param[in] x a floating point value
\return \c true if \c x has zero value, \c false otherwise.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t, 
\ref teuthid::floatmp "floatmp<Precision>" and integral types.
\see system::equal_to(), system::is_finite(), system::is_positive(), 
system::is_negative().
*/

/*!
\fn template <typename T> static bool system::is_positive(const T &x)
\brief Determines if the floating point number has positive value.
@param[in] x a floating point value
\return \c true if \c x has positive value, \c false otherwise.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t, 
\ref teuthid::floatmp "floatmp<Precision>" and integral types.
\see system::equal_to(), system::is_finite(), system::is_zero(), 
system::is_negative().
*/


/*!
\fn template <typename T> static bool system::is_negative(const T &x)
\brief Determines if the floating point number has negative value.
@param[in] x a floating point value
\return \c true if \c x has negative value, \c false otherwise.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t, 
\ref teuthid::floatmp "floatmp<Precision>" and integral types.
\see system::equal_to(), system::is_finite(), system::is_zero(), 
system::is_positive().
*/


/*!
\fn template <typename T> static void system::swap(T &x, T &y)
\brief Exchanges the given values.
@param[in,out] x the value to be swapped.
@param[in,out] y the value to be swapped.
\note The function has specializations for the following types: \c mpfr_t and 
\ref teuthid::floatmp "floatmp<Precision>". For other types, the function 
behaves just like the \c std::swap().
*/


/*!
\fn template <typename T> static constexpr bool system::is_floatmp(const T &)
\brief Checks whether \c T is a multiple precision floating-point type. 
\return \c true if \c T is the type of 
\ref teuthid::floatmp "floatmp<Precision>", \c false otherwise.
*/
