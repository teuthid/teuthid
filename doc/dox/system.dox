/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/


/*! \class teuthid::system system.hpp <teuthid/system.hpp>
 * \brief This class includes a number of functions that control the framework
 * and provide information about its settings.
 *
 *  All functions that provides class teuthid::system are static.
 * 
 */


/*! \fn static constexpr uint8_t system::major_version()
 * \brief Returns the major version of the framework.
 * \see version().
 */


/*! \fn static constexpr uint8_t system::minor_version()
 * \brief Returns the minor version of the framework.
 * \see version().
 */


/*! \fn static constexpr uint8_t system::patch_version()
 * \brief Returns the patch version of the framework.
 * \see version().
 */

/*! \fn static constexpr uint8_t system::soversion()
 * \brief Returns the soversion of the framework shared libraries.
 * \see version().
 */


/*! \fn static const std::string &system::version()
 * \brief Returns the version of the framework.
 *
 * \return the version of the framework as a string that has the following 
 * format: \e "<major_version>.<minor_version>.<patch_version>".
 * \see major_version(), minor_version(), patch_version().
 */


/*! \fn static bool system::is_required_version(uint8_t major, uint8_t minor)
 * \brief Checks whether a version of the framework is sufficient. 
 * \return \c true if a version of the framewrok is a sufficient version. 
 * Otherwise return \c false. 
 * @param[in] major The required minimum major version of the framework.
 * @param[in] minor The required minimum minor version of the framework 
 * (if the major version is the same as required \c major).
 * \see major_version(), minor_version(), version().
 */ 


/*! \fn static bool system::have_clb()
 * \brief Checks whether the framework can use OpenCL compute kernels.
 * \return \c true if the framework can use OpenCL compute kernels - the system 
 * must have at least one properly working OpenCL platform with one properly 
 * working OpenCL device. Otherwise return \c false.
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 * \see use_clb(), clb::platform::platforms(), clb::platform::devices().
 */


/*! \fn static bool system::use_clb()
 * \brief Checks whether a given thread can use OpenCL compute kernels.
 * \return \c true if a given thread (a thread that call this function) can use 
 * OpenCL compute kernels in a multithreading environment. 
 * Otherwise return \c false.
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 * \see use_clb(bool), have_clb().
 */


/*! \fn static bool system::use_clb(bool enabled)
 * \brief Enables or disables the possibility to use OpenCL compute kernels
 * by a given thread.
 *
 * @param[in] enabled enables (if it is equal to \c true) or disables (if it is 
 * equal to \c false) the possibility to use OpenCL compute kernels by a given
 * thread (a thread that call this function).
 * \return \c true if a given thread (a thread that call this function) can use 
 * OpenCL compute kernels in a multithreading environment. 
 * Otherwise return \c false.
 * \note The Teuthid framework must be compiled with enabled 
 * \c BUILD_WITH_OPENCL option to be able to use the OpenCL platforms and 
 * devices.
 * \see have_clb().
 */

