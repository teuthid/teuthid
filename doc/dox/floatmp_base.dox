/*
  This file is part of the Teuthid project.
  Copyright (c) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

  The Teuthid is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or (at your
  option) any later version.

  The Teuthid is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with the Teuthid; see the file LICENSE.LGPLv3.  If not, see
  <http://www.gnu.org/licenses/>.
*/

/*! 
\file floatmp.hpp 
*/ 


/*! 
\enum teuthid::floatmp_round_t
\brief This enumeration includes named constants that identifies rounding modes for multiprecison floating-point numbers.
\see floatmp::rounding_mode().
*/
/*!
\var teuthid::floatmp_round_t::round_to_nearest
\hideinitializer
Indicates a rounding to nearest (\c roundTiesToEven in IEEE 754-2008).
*/
/*!
\var teuthid::floatmp_round_t::round_toward_zero
\hideinitializer
Indicates a rounding toward zero (\c roundTowardZero in IEEE 754-2008).
*/
/*!
\var teuthid::floatmp_round_t::round_toward_infinity
\hideinitializer
Indicates a rounding toward plus infinity (\c roundTowardPositive in 
IEEE 754-2008).
*/
/*!
\var teuthid::floatmp_round_t::round_toward_neg_infinity
\hideinitializer
Indicates a rounding toward minus infinity (\c roundTowardNegative in 
IEEE 754-2008).
*/
/*!
\var teuthid::floatmp_round_t::round_away_from_zero
\hideinitializer
Indicates a rounding away from zero.
*/
/*!
\var teuthid::floatmp_round_t::round_to_nearest_away_from_zero
\hideinitializer
Indicates a rounding to nearest, with ties away from zero.
*/


/*!
\class teuthid::floatmp_base floatmp.hpp <teuthid/floatmp.hpp>
\brief This is a base class of teuthid::floatmp that represents floating-point 
numbers with precise semantics.
\see floatmp::max_precision(), floatmp::min_precision().
*/


/*!
\fn teuthid::floatmp_base::floatmp_base(std::size_t precision)
\brief Constructs the object that represents a floating-point number with a 
specified precision.
\details Sets the value to zero.
@param[in] precision a precision of floating-point number. This value should be 
within the range [min_precision(), max_precision()].
\see is_zero().
*/


/*!
\fn teuthid::floatmp_base::floatmp_base(std::size_t precision, const floatmp_base &x)
\brief Constructs the object that represents a floating-point number with a 
specified precision.
\details Sets the value to \c x.
@param[in] precision a precision of floating-point number. This value should be 
within the range [min_precision(), max_precision()].
@param[in] x a multi-precision floating-point number.
\see c_mpfr().
*/


/*!
\fn teuthid::floatmp_base::floatmp_base(std::size_t precision, const T &x)
\brief Constructs the object that represents a floating-point number with a 
specified precision.
\details Sets the value to \c x.
@param[in] precision a precision of floating-point number. This value should be 
within the range [min_precision(), max_precision()].
@param[in] x a number.
\note The function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types.
*/


/*!
\fn virtual teuthid::floatmp_base::~floatmp_base()
\brief Destructs this object that represents a floating-point number.
*/


/*!
\fn explicit teuthid::floatmp_base::operator float() const
\brief Converts to a value of type \c float.
\return a \c float value after the convertion of this multi-precision 
floating-point number. 
*/

/*!
\fn explicit teuthid::floatmp_base::operator double() const
\brief Converts to a value of type \c double.
\return a \c double value after the convertion of this multi-precision 
floating-point number. 
*/


/*!
\fn explicit teuthid::floatmp_base::operator long double() const
\brief Converts to a value of type <tt>long double</tt>.
\return a <tt>long double</tt> value after the convertion of this 
multi-precision floating-point number. 
*/


/*!
\fn const mpfr_t &floatmp_base::c_mpfr() const noexcept
\brief Gets the reference to the \c mpfr_t wrapped value.
\return the constant reference to the \c mpfr_t wrapped value of this object.
*/


/*!
\fn bool floatmp_base::is_finite() const
\brief Determines if this number has finite value.
\return \c true if this multi-precision floating-point number has finite value, 
\c false if this number is infinite or NaN.
\see system::is_finite(), is_infinite(), is_nan(), is_zero(), is_negative(), 
is_positive(), is_integer().
*/


/*!
\fn bool floatmp_base::is_infinite() const
\brief Determines if this number is a positive or negative infinity.
\return \c true if this multi-precision floating-point number is infinite, 
\c false otherwise.
\see system::is_infinite(), is_finite().
*/


/*!
\fn bool floatmp_base::is_nan() const
\brief Determines if this number is a not-a-number (NaN) value.
\return \c true if this multi-precision floating-point number is a NaN, 
\c false otherwise.
\see system::is_nan(), is_finite(), is_infinite().
*/


/*!
\fn bool floatmp_base::is_zero() const
\brief Determines if this number has zero value.
\return \c true if this multi-precision floating-point number has zero value, 
\c false otherwise.
\see system::is_zero(), is_negative(), is_positive(), is_integer().
*/


/*!
\fn bool floatmp_base::is_negative() const
\brief Determines if this number has negative value.
\return \c true if this multi-precision floating-point number has negative 
value, \c false otherwise.
\see system::is_negative(), is_positive(), is_zero().
*/


/*!
\fn bool floatmp_base::is_positive() const
\brief Determines if this number has positive value.
\return \c true if this multi-precision floating-point number has positive 
value, \c false otherwise.
\see system::is_positive(), is_negative(), is_zero().
*/


/*!
\fn bool floatmp_base::is_integer() const
\brief Determines if this number is an integer.
\return \c true if this multi-precision floating-point number is an integer, 
\c false otherwise.
\see is_zero().
*/
