/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/

// class teuthid::cl::platform_info
/*! \class teuthid::cl::platform_info cl_platform_info.hpp \ 
<teuthid/cl_platform_info.hpp>
 *  \brief This class holds specific information about available the OpenCL
 * platform(s).
 * 
 * <a href="https://www.khronos.org/opencl/">OpenCL</a> is used as an interface 
 * for executing code on parallel devices such as GPUs and multi-core CPUs. 
 *
 * See \ref teuthid::library::have_opencl() "library::have_opencl()" and
 * \ref platforms() "platforms()" about checking if the running system has 
 * OpenCL-capable hardware and working OpenCL drivers.
 */

 // enum teuthid::cl::platform_info::opencl_profile_t
/*! \enum teuthid::cl::platform_info::opencl_profile_t
 * \brief This enumeration includes named constants of OpenCL platform's 
 * profile.
 *
 * \see profile(), is_full_profile(), is_embedded_profile().
 */
/*! \var teuthid::cl::platform_info::FULL_PROFILE
 * Identifies a platform which supports the OpenCL 
 * <a href="https://www.khronos.org/registry/OpenCL/">specification</a>
 * (functionality defined as part of the core specification and does not 
 * require any extensions to be supported).
 */
/*! \var teuthid::cl::platform_info::EMBEDDED_PROFILE
 * Identifies a platform which supports the OpenCL embedded profile. 
 * The embedded profile is defined to be a subset for each version of OpenCL.
 */
/*!
 * \var teuthid::cl::platform_info::UNKNOWN_PROFILE
 * Unknown OpenCL platform's profile (is undetermined).
 */

// teuthid::cl::platform_info::platform_info()
/*! \fn teuthid::cl::platform_info::platform_info()
 * \brief Constructs a new object of class platform_info.
 *
 * The new object is empty and <b>does not</b> contain information about any
 * OpenCL platform.
 */

// teuthid::cl::platform_info::~platform_info()
/*! \fn teuthid::cl::platform_info::~platform_info()
 * \brief Destructs an object of class platform_info.
 */

// opencl_platform_id_t teuthid::cl::platform_info::id() const
/*! \fn opencl_platform_id_t teuthid::cl::platform_info::id() const
 * \brief Returns the identifier for this OpenCL platform.
 *
 * The returned value is the equivalent of \c cl_platform_id. If it's equal to
 * \c NULL, the platform is undetermined.
 */
   
// opencl_profile_t teuthid::cl::platform_info::profile() const
/*! \fn opencl_profile_t teuthid::cl::platform_info::profile() const
 * \brief Returns the OpenCL platform's profile supported by the implementation.
 *
 * The profile returned can be one of the following: 
 * \ref teuthid::cl::platform_info::FULL_PROFILE "FULL_PROFILE",
 * \ref teuthid::cl::platform_info::EMBEDDED_PROFILE "EMBEDDED_PROFILE", or
 * \ref teuthid::cl::platform_info::UNKNOWN_PROFILE "UNKNOWN_PROFILE".
 * \see is_full_profile(), is_embedded_profile().
 */

// bool teuthid::cl::platform_info::is_full_profile() const
/*! \fn bool teuthid::cl::platform_info::is_full_profile() const
 * \brief Returns \c true if the OpenCL platform's profile is 
 * \ref teuthid::cl::platform_info::FULL_PROFILE "FULL_PROFILE".
 * 
 * Otherwise returns \c false.
 * \see profile().
 */

// bool teuthid::cl::platform_info::is_embedded_profile() const
/*! \fn bool teuthid::cl::platform_info::is_embedded_profile() const
 * \brief Returns \c true if the OpenCL platform's profile is 
 * \ref teuthid::cl::platform_info::EMBEDDED_PROFILE "EMBEDDED_PROFILE".
 * 
 * Otherwise returns \c false.
 * \see profile().
 */
 
//  const std::string &teuthid::cl::platform_info::version() const
/*! \fn const std::string &teuthid::cl::platform_info::version() const
 * \brief Returns the OpenCL platform's version supported by the implementation.
 *
 * The returned value has the following format:
 * \e "<major_version.minor_version><space><platform-specific information>", 
 * for example \e "1.2 beignet 1.1.2". \n
 * The \e "major_version.minor_version" determines version of OpenCL supported 
 * by the implementation.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_VERSION.
 */

// const std::string &teuthid::cl::platform_info::name() const
/*! \fn const std::string &teuthid::cl::platform_info::name() const
 * \brief Returns the OpenCL platform's name.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_NAME.
 */

// const std::string &teuthid::cl::platform_info::vendor() const
/*! \fn const std::string &teuthid::cl::platform_info::vendor() const
 * \brief Returns the OpenCL platform's vendor.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_VENDOR.
 */

