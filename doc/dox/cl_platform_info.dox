/*
  This file is part of the Teuthid project.
  Copyright (C) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Teuthid.  If not, see <http://www.gnu.org/licenses/>.
*/


/*! \typedef typedef std::vector<cl::platform_info> teuthid::opencl_platforms_t
 * \brief This is a type alias for the vector containing objects of class
 * \ref teuthid::cl::platform_info "platform_info".
 *
 * \see \ref teuthid::cl::platform_info::platforms() 
 * "platform_info::platforms()".
 */


/*! \class teuthid::cl::platform_info cl_platform_info.hpp \ 
<teuthid/cl_platform_info.hpp>
 *  \brief This class holds specific information about available the OpenCL
 * platform(s).
 * 
 * <a href="https://www.khronos.org/opencl/">OpenCL</a> is used as an interface 
 * for executing code on parallel devices such as GPUs and multi-core CPUs. 
 * 
 * \b Example:
 * \code
 * #include <iostream>
 * #include <teuthid/library.hpp>
 * using namespace teuthid;
 * 
 * int main() {
 *   std::cout << "Available OpenCL platform(s): "
 *             << library::opencl_platforms().size() << std::endl;
 *
 *   for (auto __platform : library::opencl_platforms()) {
 *
 *     std::cout << "Platform Name: " << __platform.name() << std::endl;
 *     std::cout << "Platform Vendor: " << __platform.vendor() << std::endl;
 *     std::cout << "Platform Version: " << __platform.version() << std::endl;
 *
 *     if (__platform.is_full_profile())
 *       std::cout << "  Platform Profile: FULL_PROFILE" << std::endl;
 *   }   
 *
 *   return 0;
 * }
 * \endcode
 * See \ref teuthid::library::have_opencl() "library::have_opencl()" and
 * platforms() about checking if the running system has OpenCL-capable hardware 
 * and drivers.
 */

 
/*! \enum teuthid::cl::platform_info::opencl_profile_t
 * \brief This enumeration includes named constants of OpenCL platform's 
 * profile.
 *
 * \see profile(), is_full_profile(), is_embedded_profile().
 */
/*! \var teuthid::cl::platform_info::FULL_PROFILE
 * Identifies a platform which supports the OpenCL 
 * <a href="https://www.khronos.org/registry/OpenCL/">specification</a>
 * (functionality defined as part of the core specification and does not 
 * require any extensions to be supported).
 */
/*! \var teuthid::cl::platform_info::EMBEDDED_PROFILE
 * Identifies a platform which supports the OpenCL embedded profile. 
 * The embedded profile is defined to be a subset for each version of OpenCL.
 */
/*!
 * \var teuthid::cl::platform_info::UNKNOWN_PROFILE
 * Unknown OpenCL platform's profile (is undetermined).
 */


/*! \fn platform_info::platform_info()
 * \brief Constructs a new object of class platform_info.
 *
 * The new object is empty and <b>does not</b> contain information about any
 * OpenCL platform.
 */


/*! \fn platform_info::~platform_info()
 * \brief Destructs an object of class platform_info.
 */


/*! \fn const opencl_platform_id_t &platform_info::id() const
 * \brief Returns the identifier for this OpenCL platform.
 *
 * The returned value is the equivalent of \c cl_platform_id. If it is equal to
 * \c NULL, the OpenCL platform is undetermined.
 */
   

/*! \fn const opencl_profile_t &platform_info::profile() const
 * \brief Returns the OpenCL platform's profile supported by the system.
 *
 * The profile returned can be one of the following: 
 * \ref teuthid::cl::platform_info::FULL_PROFILE "FULL_PROFILE",
 * \ref teuthid::cl::platform_info::EMBEDDED_PROFILE "EMBEDDED_PROFILE", or
 * \ref teuthid::cl::platform_info::UNKNOWN_PROFILE "UNKNOWN_PROFILE".
 * \see is_full_profile(), is_embedded_profile().
 */


/*! \fn bool platform_info::is_full_profile() const
 * \brief Returns \c true if the OpenCL platform's profile is 
 * \ref teuthid::cl::platform_info::FULL_PROFILE "FULL_PROFILE".
 * 
 * Otherwise returns \c false.
 * \see profile().
 */


/*! \fn bool platform_info::is_embedded_profile() const
 * \brief Returns \c true if the OpenCL platform's profile is 
 * \ref teuthid::cl::platform_info::EMBEDDED_PROFILE "EMBEDDED_PROFILE".
 * 
 * Otherwise returns \c false.
 * \see profile().
 */
 

/*! \fn const std::string &platform_info::version() const
 * \brief Returns the OpenCL platform's version supported by the system.
 *
 * The returned value has the following format:
 * \e "<major_version.minor_version><space><platform-specific information>", 
 * for example \e "1.2 beignet 1.1.2". \n
 * The \e "major_version.minor_version" determines version of OpenCL supported 
 * by the system.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_VERSION.
 * If it is an empty string, the OpenCL platform's version is undetermined.
 * \see major_version(), minor_version(), spec_version().
 */


/*! \fn int platform_info::major_version() const
 * \brief Returns the OpenCL major version supported by the system.
 * 
 * \see minor_version(), version().
 */


/*! \fn int platform_info::minor_version() const
 * \brief Returns the OpenCL minor version supported by the system.
 * 
 * \see major_version(), version().
 */


/*! \fn const std::string &platform_info::spec_version() const
 * \brief Returns the platform-specific information about the OpenCL supported 
 * by the system.
 *
 * \see version().
 */


/*! \fn bool platform_info::is_required_version(int major, int minor) const
 * \brief Checks whether the version of OpenCL supported by the system
 * is sufficient.
 *
 *Returns \c true if the version of OpenCL supported by the system
 * is sufficient. Otherwise return \c false.
 * @param[in] major The required minimum major version of OpenCL supported 
 * by the system.
 * @param[in] minor The required minimum minor version of OpenCL supported 
 * by the system (if the major version is the same as required \c major).
 * \see major_version(), minor_version(), version().
 */


/*! \fn const std::string &platform_info::name() const
 * \brief Returns the OpenCL platform's name.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_NAME.
 * If it is an empty string, the OpenCL platform's name is undetermined.
 */


/*! \fn const std::string &platform_info::vendor() const
 * \brief Returns the OpenCL platform's vendor.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_VENDOR.
 * If it is an empty string, the OpenCL platform's vendor is undetermined.
 */


/*! \fn const std::string &platform_info::extensions() const
 * \brief Returns a space-separated list of extension names supported by the 
 * OpenCL platform. 
 *
 * The extension names themselves do not contain any spaces. \n
 * The returned value is the equivalent of \c CL_PLATFORM_EXTENSIONS.
 */


/*! \fn uint64_t platform_info::host_timer_resolution() const
 * \brief Returns the resolution of the host timer in nanoseconds.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_HOST_TIMER_RESOLUTION.
 */


/*! \fn const std::string &platform_info::icd_suffix_khr() const
 * \brief Returns the function name suffix used to identify extension functions to be directed to this OpenCL platform by the ICD Loader.
 *
 * The returned value is the equivalent of \c CL_PLATFORM_ICD_SUFFIX_KHR.
 */


/*! \fn const opencl_platforms_t &platform_info::platforms(bool force_detection = false)
 * \brief Returns the vector containing objects of class platform_info.
 * @param[in] force_detection If it is equal to \c true, a detection of the 
 * available OpenCL platforms and devices is performed. \n
 * Normally, it is unnecessary because such detection is performed 
 * automatically when you start an application that uses the framework.
 */

