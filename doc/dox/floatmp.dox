/*
  This file is part of the Teuthid project.
  Copyright (c) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

  The Teuthid is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or (at your
  option) any later version.

  The Teuthid is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with the Teuthid; see the file LICENSE.LGPLv3.  If not, see
  <http://www.gnu.org/licenses/>.
*/

/*! 
\file floatmp.hpp 
*/ 


/*!
\class teuthid::floatmp floatmp.hpp <teuthid/floatmp.hpp>
\brief This class represents floating-point numbers with precise semantics. 
\details The precision (the template parameter \c Precision) is the number of 
bits used to represent the significand of a floating-point number. 
The precision can be any integer between min_precision() and max_precision().
\n The implementation of this class is based on the GNU MPFR library: 
http://mpfr.org.
\see rounding_mode().
*/


/*!
\fn teuthid::floatmp::floatmp()
\brief Constructs the object that represents a floating-point number with the 
precision \c Precision.
\details Sets the value of this number to zero.
\note The precision can be any integer between min_precision() and 
max_precision().
\see assign(), equal_to().
*/


/*!
\fn teuthid::floatmp::floatmp(const floatmp<P> &x)
\brief Constructs the object that represents a floating-point number with the 
precision \c Precision.
\details Sets the value of this number to the value of \c x.
@param[in] x a a multi-precision floating-point number.
\note The precision can be any integer between min_precision() and 
max_precision().
\see assign(), equal_to().
*/


/*!
\fn teuthid::floatmp::floatmp(const T &x)
\brief Constructs the object that represents a floating-point number with the 
precision \c Precision.
\details Sets the value of this number to the value \c x.
@param[in] x a value.
\note This constructor has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types.
\note The precision can be any integer between min_precision() and 
max_precision().
\see assign(), equal_to().
*/


/*!
\fn teuthid::floatmp::~floatmp()
\brief Destructs this object that represents a floating-point number.
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator=(const floatmp <Precision> &other)	
\brief Sets the value of this number to the value of the number \c other.
\details This is the canonical copy-assignment operator.
@param[in] other a multi-precision floating-point number.
\return the reference to this object.
\see assign().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator=(const floatmp<P> &other)	
\brief Sets the value of this number to the value of the number \c other.
@param[in] other a multi-precision floating-point number with precision other 
than precision of this number.
\return the reference to this object.
\see assign().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator=(const T &x)
\brief Sets the value of this number to the value \c x.
@param[in] x a value.
\note This constructor has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\return the reference to this object.
\see assign().
*/


/*!
\fn teuthid::floatmp<Precision>::operator floatmp<P>() const
\brief Convert to a floating-point number with specified precision.
\return a multi-precision floating-point number with precision \c P.
\see min_precision(), max_precision().
*/


/*!
\fn floatmp teuthid::floatmp<Precision>::operator-() const
\brief Gets a floating-point number with the opposite sign to this number.
\details This is the unary negation operator.
\return a floating-point number with the opposite sign to this number without 
changing the precision.
\see sub().
*/
