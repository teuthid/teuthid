/*
  This file is part of the Teuthid project.
  Copyright (c) 2016-2017 Mariusz Przygodzki (mariusz.przygodzki@gmail.com)

  The Teuthid is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or (at your
  option) any later version.

  The Teuthid is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with the Teuthid; see the file LICENSE.LGPLv3.  If not, see
  <http://www.gnu.org/licenses/>.
*/

/*! 
\file floatmp.hpp 
*/ 


/*!
\class teuthid::floatmp floatmp.hpp <teuthid/floatmp.hpp>
\brief This class represents floating-point numbers with precise semantics. 
\details The precision (the template parameter \c Precision) is the number of 
bits used to represent the significand of a floating-point number. 
The precision can be any integer between min_precision() and max_precision().
\n The implementation of this class is based on the GNU MPFR library: 
http://mpfr.org.
\see rounding_mode().
*/


/*!
\fn teuthid::floatmp::floatmp()
\brief Constructs the object that represents a floating-point number with the 
precision \c Precision.
\details Sets the value of this number to zero.
\note The precision can be any integer between min_precision() and 
max_precision().
\see assign(), equal_to().
*/


/*!
\fn teuthid::floatmp::floatmp(const floatmp<P> &x)
\brief Constructs the object that represents a floating-point number with the 
precision \c Precision.
\details Sets the value of this number to the value of \c x.
@param[in] x a multi-precision floating-point number.
\note The precision can be any integer between min_precision() and 
max_precision().
\see assign(), equal_to().
*/


/*!
\fn teuthid::floatmp::floatmp(const T &x)
\brief Constructs the object that represents a floating-point number with the 
precision \c Precision.
\details Sets the value of this number to the value \c x.
@param[in] x a value.
\note This constructor has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types.
\note The precision can be any integer between min_precision() and 
max_precision().
\see assign(), equal_to().
*/


/*!
\fn teuthid::floatmp::~floatmp()
\brief Destructs this object that represents a floating-point number.
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator=(const floatmp <Precision> &other)	
\brief Sets the value of this number to the value of the number \c other.
\details This is the canonical copy-assignment operator.
@param[in] other a multi-precision floating-point number.
\return the reference to this object.
\see assign().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator=(const floatmp<P> &other)	
\brief Sets the value of this number to the value of the number \c other.
@param[in] other a multi-precision floating-point number with precision other 
than precision of this number.
\return the reference to this object.
\see assign().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator=(const T &x)
\brief Sets the value of this number to the value \c x.
@param[in] x a value to be assigned to this number.
\return the reference to this object.
\note This constructor has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see assign().
*/


/*!
\fn teuthid::floatmp<Precision>::operator floatmp<P>() const
\brief Convert to a floating-point number with specified precision.
\return a multi-precision floating-point number with precision \c P.
\see min_precision(), max_precision().
*/


/*!
\fn floatmp teuthid::floatmp<Precision>::operator-() const
\brief Gets a floating-point number with the opposite sign to this number.
\details This is the unary negation operator.
\return a floating-point number with the opposite sign to this number without 
changing the precision.
\see sub().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator+=(const T &x)
\brief Adds the value \c x to this number.
@param[in] x a value to be added to this number.
\return the reference to this object.
\note This operator has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see add().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator-=(const T &x)
\brief Subtracts the value \c x from this number.
@param[in] x a value to be subtracted from this number.
\return the reference to this object.
\note This operator has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see sub().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator*=(const T &x)
\brief Multiplies this number by the value \c x.
@param[in] x a value by which this number will be multiplied.
\return the reference to this object.
\note This operator has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see mul().
*/


/*!
\fn floatmp& teuthid::floatmp<Precision>::operator/=(const T &x)
\brief Divides this number by the value \c x.
@param[in] x a value by which this number will be divived.
\return the reference to this object.
\note This operator has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see div().
*/


/*!
\fn floatmp& floatmp::assign(const T &x)
\brief Sets the value of this number to the value \c x.
@param[in] x a value to be assigned to this number.
\return the reference to this object.
\note This constructor has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see equal_to(), less_than().
*/


/*!
\fn bool floatmp::equal_to(const T &x) const
\brief Checks whether \c x is equal to this number.
@param[in] x a value of type \c T to compare.
\return \c true if \c x is equal to this number, \c false otherwise.
\note This function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types.
\note To compare these numbers, this function converts both numbers to 
strings according to the current format settings for system::to_string().
\see system::equal_to(), less_than(), swap(), fmax(), fmin().
*/


/*!
\fn bool floatmp::less_than(const T &x) const
\brief Checks whether this number is less than \c x.
@param[in] x a value of type \c T to compare.
\return \c true if this number is less than \c x, \c false otherwise.
\note This function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types.
\note To compare these numbers, this function converts both numbers to 
strings according to the current format settings for system::to_string().
\see system::less_than(), equal_to(), fmax(), fmin().
*/


/*!
\fn floatmp& floatmp::add(const T &x)
\brief Adds the value \c x to this number.
@param[in] x a value to be added to this number.
\return the reference to this object.
\note This function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see sub(), mul(), div().
*/


/*!
\fn floatmp& floatmp::sub(const T &x)
\brief Subtracts the value \c x from this number.
@param[in] x a value to be subtracted from this number.
\return the reference to this object.
\note This function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see add(), mul(), div(), fdim().
*/


/*!
\fn floatmp& floatmp::mul(const T &x)
\brief Multiplies this number by the value \c x.
@param[in] x a value by which this number will be multiplied.
\return the reference to this object.
\note This function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see add(), sub(), div().
*/


/*!
\fn floatmp& floatmp::div(const T &x)
\brief Divides this number by the value \c x.
@param[in] x a value by which this number will be divived.
\return the reference to this object.
\note This function has specializations for the following types: \c float, 
\c double, <tt>long double</tt>, \c mpfr_t and integer types. 
\see add(), sub(), mul(), fmod(), remainder().
*/


/*!
\fn constexpr std::size_t floatmp::precision() const noexcept
\brief Gets the precision.
\return the precision of this number.
\see max_precision(), min_precision().
*/


/*!
\fn floatmp& floatmp::swap(floatmp<P> &x)
\brief Exchanges the value of this number with the value \c x.
\details Precision of both numbers remains unchanged.
@param[in,out] x the value to be swapped.
\return the reference to this object.
\see system::swap(), equal_to().
*/


/*!
\fn floatmp& floatmp::abs(const floatmp<P> &x)
\brief Sets this number to the absolute value of \c x (\c |x|).
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see fdim().
*/


/*!
\fn floatmp& floatmp::fmod(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the remainder of the division operation \c x/y.
\details The remainder of the division operation \c x/y calculated by this 
function is exactly the value <tt>x - n*y</tt>, where \c n is \c x/y with its 
fractional part truncated. The result has the same sign as \c x and is less 
than \c y in magnitude.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c y is zero.
\see div(), remainder().
*/


/*!
\fn floatmp& floatmp::remainder(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the IEEE remainder of the division operation \c x/y.
\details The IEEE remainder of the division operation \c x/y calculated by this 
function is exactly the value <tt>x - n*y</tt>, where the value \c n is the 
integral value nearest the exact value \c x/y. When <tt>|n-x/y| = ½</tt>, the 
value \c n is chosen to be even. In contrast to fmod(), the result is not 
guaranteed to have the same sign as \c x. 
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c y is zero.
\see div(), fmod(), fma().
*/


/*!
\fn floatmp& floatmp::fma(const floatmp<P1> &x, const floatmp<P2> &y, const floatmp<P3> &z)
\brief Sets this number to <tt>(x*y) + z</tt> as if to infinite precision and 
rounded only once to fit the result type.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
@param[in] z a multi-precision floating-point number.
\return the reference to this object.
\see remainder().
*/


/*!
\fn floatmp& floatmp::fmax(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the larger of two arguments.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\note To compare numbers, this function converts both numbers to strings 
according to the current format settings for system::to_string().
\see fmin(), fdim(), equal_to(), less_than().
*/


/*!
\fn floatmp& floatmp::fmin(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the smaller of two arguments.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\note To compare numbers, this function converts both numbers to strings 
according to the current format settings for system::to_string().
\see fmax(), equal_to(), less_than().
*/


/*!
\fn floatmp& floatmp::fdim(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the positive difference between \c x and \c y
\details If \c x>y, the result is \c x-y, otherwise (if \c x≤y), the result is 
\c 0.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\see abs(), fmax().
*/


/*!
\fn floatmp& floatmp::exp(const floatmp<P> &x)
\brief Sets this number to the \e e (Euler's number, \c 2.7182818) raised to 
the given power \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see exp2(), expm1(), log().
*/


/*!
\fn floatmp& floatmp::exp2(const floatmp<P> &x)
\brief Sets this number to \c 2 raised to the given power \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see exp(), expm1(), log2().
*/


/*!
\fn floatmp& floatmp::expm1(const floatmp<P> &x)
\brief Sets this number to the \e e (Euler's number, \c 2.7182818) raised to 
the given power \c x minus \c 1.0.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see exp(), exp2(), log1p().
*/


/*!
\fn floatmp& floatmp::log(const floatmp<P> &x)
\brief Sets this number to the natural (base \e e) logarithm of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is less than or equal to zero.
\see log10(), log2(), log1p(), exp(), is_positive().
*/


/*!
\fn floatmp& floatmp::log10(const floatmp<P> &x)
\brief Sets this number to the common (base \e 10) logarithm of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is less than or equal to zero.
\see log(), log2(), log1p(), is_positive().
*/


/*!
\fn floatmp& floatmp::log2(const floatmp<P> &x)
\brief Sets this number to the binary (base \e 2) logarithm of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is less than or equal to zero.
\see log(), log10(), log1p(), exp2(), is_positive().
*/


/*!
\fn floatmp& floatmp::log1p(const floatmp<P> &x)
\brief Sets this number to the natural (base \e e) logarithm of \c 1+x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is less than or equal to \c -1.
\see log(), log10(), log2(), expm1(), minus_one().
*/


/*!
\fn floatmp& floatmp::pow(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the value of \c x raised to the power \c y.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is finite and negative and \c y is finite 
and non-integer.
\exception std::domain_error if \c x is zero and \c y is zero or negative.
\see sqrt(), cbrt(), hypot(), is_negative(), is_zero().
*/


/*!
\fn floatmp& floatmp::sqrt(const floatmp<P> &x)
\brief Sets this number to the square root of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is less than zero.
\see pow(), cbrt(), hypot(), is_negative().
*/


/*!
\fn floatmp& floatmp::cbrt(const floatmp<P> &x)
\brief Sets this number to the cubic root of \c x (\c<sup>3</sup>√x).
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see pow(), sqrt(), hypot().
*/


/*!
\fn floatmp& floatmp::hypot(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the square root of the sum of the squares of \c x 
and \c y (\c√x<sup>2</sup>+y<sup>2</sup>).
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\see pow(), sqrt(), cbrt().
*/


/*!
\fn floatmp& floatmp::sin(const floatmp<P> &x)
\brief Sets this number to the sine of \c x (measured in radians).
@param[in] x a multi-precision floating-point number representing angle in 
radians.
\return the reference to this object.
\see cos(), tan(), asin().
*/


/*!
\fn floatmp& floatmp::cos(const floatmp<P> &x)
\brief Sets this number to the cosine of \c x (measured in radians).
@param[in] x a multi-precision floating-point number representing angle in 
radians.
\return the reference to this object.
\see sin(), tan(), acos().
*/


/*!
\fn floatmp& floatmp::tan(const floatmp<P> &x)
\brief Sets this number to the tangent of \c x (measured in radians).
@param[in] x a multi-precision floating-point number representing angle in 
radians.
\return the reference to this object.
\see sin(), cos(), atan().
*/


/*!
\fn floatmp& floatmp::asin(const floatmp<P> &x)
\brief Sets this number to the principal value of the arc sine of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is outside the range <tt>[-1.0; 1.0]</tt>.
\see acos(), atan(), atan2(), sin(), minus_one(), plus_one().
*/


/*!
\fn floatmp& floatmp::acos(const floatmp<P> &x)
\brief Sets this number to the principal value of the arc cosine of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is outside the range <tt>[-1.0; 1.0]</tt>.
\see asin(), atan(), atan2(), cos(), minus_one(), plus_one().
*/


/*!
\fn floatmp& floatmp::atan(const floatmp<P> &x)
\brief Sets this number to the principal value of the arc tangent of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see asin(), acos(), atan2(), tan().
*/


/*!
\fn floatmp& floatmp::atan2(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the arc tangent of \c y/x using the signs of 
arguments to determine the correct quadrant.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\see asin(), acos(), atan()
*/


/*!
\fn floatmp& floatmp::sinh(const floatmp<P> &x)
\brief Sets this number to the hyperbolic sine of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see cosh(), tanh(), asinh().
*/


/*!
\fn floatmp& floatmp::cosh(const floatmp<P> &x)
\brief Sets this number to the hyperbolic cosine of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see sinh(), tanh(), acosh().
*/


/*!
\fn floatmp& floatmp::tanh(const floatmp<P> &x)
\brief Sets this number to the hyperbolic tangent of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see sinh(), cosh(), atanh().
*/


/*!
\fn floatmp& floatmp::asinh(const floatmp<P> &x)
\brief Sets this number to the inverse hyperbolic sine of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see acosh(), atanh(), sinh().
*/


/*!
\fn floatmp& floatmp::acosh(const floatmp<P> &x)
\brief Sets this number to the inverse hyperbolic cosine of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is less than \c 1.
\see asinh(), atanh(), cosh(), plus_one().
*/


/*!
\fn floatmp& floatmp::atanh(const floatmp<P> &x)
\brief Sets this number to the inverse hyperbolic tangent of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is not on the interval <tt>(-1, +1)</tt>.
\see asinh(), acosh(), tanh(), minus_one(), plus_one().
*/


/*!
\fn floatmp& floatmp::erf(const floatmp<P> &x)
\brief Sets this number to the 
<a href="https://en.wikipedia.org/wiki/Error_function">error function</a> 
of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see erfc().
*/


/*!
\fn floatmp& floatmp::erfc(const floatmp<P> &x)
\brief Sets this number to the 
<a href="https://en.wikipedia.org/wiki/Error_function">complementary error 
function</a> of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see erf().
*/


/*!
\fn floatmp& floatmp::tgamma(const floatmp<P> &x)
\brief Sets this number to the
<a href="https://en.wikipedia.org/wiki/Gamma_function">gamma function</a> 
of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is zero or is an integer less than zero.
\see lgamma(), is_integer(), is_zero().
*/


/*!
\fn floatmp& floatmp::lgamma(const floatmp<P> &x)
\brief Sets this number to the natural logarithm of the absolute value of the 
<a href="https://en.wikipedia.org/wiki/Gamma_function">gamma function</a> 
of \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is zero or is an integer less than zero.
\see tgamma(), is_integer(), is_zero().
*/


/*!
\fn floatmp& floatmp::ceil(const floatmp<P> &x)
\brief Sets this number to the smallest integer value not less than \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see floor(), trunc(), round(), nearbyint().
*/


/*!
\fn floatmp& floatmp::floor(const floatmp<P> &x)
\brief Sets this number to the largest integer value not greater than \c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see ceil(), trunc(), round().
*/


/*!
\fn floatmp& floatmp::trunc(const floatmp<P> &x)
\brief Sets this number to the nearest integer not greater in magnitude than 
\c x.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see floor(), ceil(), round().
*/


/*!
\fn floatmp& floatmp::round(const floatmp<P> &x)
\brief Sets this number to the nearest integer value to \c x, rounding halfway 
cases away from zero, regardless of the current rounding mode.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see floor(), ceil(), trunc().
*/


/*!
\fn floatmp& floatmp::nearbyint(const floatmp<P> &x)
\brief Sets this number to the nearest integer value to \c x, according to the 
current rounding mode.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\see round().
*/


/*!
\fn floatmp& floatmp::nextafter(const floatmp<P1> &x, const floatmp<P2> &y)
\brief Sets this number to the next representable value of \c x in the 
direction of \c y.
\details Sets this number to the value of \c y if \c x equals to \c y.
@param[in] x a multi-precision floating-point number.
@param[in] y a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is not finite.
\see nextabove(), nextbelow(), is_finite().
*/


/*!
\fn floatmp& floatmp::nextabove(const floatmp<P> &x)
\brief Sets this number to the next representable value of \c x in the 
direction of plus infinity.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is not finite.
\see nextafter(), nextbelow(), is_finite().
*/


/*!
\fn floatmp& floatmp::nextbelow(const floatmp<P> &x)
\brief Sets this number to the next representable value of \c x in the 
direction of minus infinity.
@param[in] x a multi-precision floating-point number.
\return the reference to this object.
\exception std::domain_error if \c x is not finite.
\see nextafter(), nextabove(), is_finite().
*/
